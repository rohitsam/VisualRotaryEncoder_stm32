
usb_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a48  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003b08  08003b08  00013b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b94  08003b94  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b94  08003b94  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b94  08003b94  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b94  08003b94  00013b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b98  08003b98  00013b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  2000005c  08003bf8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08003bf8  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b604  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e62  00000000  00000000  0002b6cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c0  00000000  00000000  0002d530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000788  00000000  00000000  0002def0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019b53  00000000  00000000  0002e678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ecda  00000000  00000000  000481cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009189f  00000000  00000000  00056ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000025f8  00000000  00000000  000e8744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000ead3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003af0 	.word	0x08003af0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08003af0 	.word	0x08003af0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b08b      	sub	sp, #44	; 0x2c
 8000248:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024a:	2414      	movs	r4, #20
 800024c:	193b      	adds	r3, r7, r4
 800024e:	0018      	movs	r0, r3
 8000250:	2314      	movs	r3, #20
 8000252:	001a      	movs	r2, r3
 8000254:	2100      	movs	r1, #0
 8000256:	f002 ffc5 	bl	80031e4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800025a:	4b34      	ldr	r3, [pc, #208]	; (800032c <MX_GPIO_Init+0xe8>)
 800025c:	695a      	ldr	r2, [r3, #20]
 800025e:	4b33      	ldr	r3, [pc, #204]	; (800032c <MX_GPIO_Init+0xe8>)
 8000260:	2180      	movs	r1, #128	; 0x80
 8000262:	0309      	lsls	r1, r1, #12
 8000264:	430a      	orrs	r2, r1
 8000266:	615a      	str	r2, [r3, #20]
 8000268:	4b30      	ldr	r3, [pc, #192]	; (800032c <MX_GPIO_Init+0xe8>)
 800026a:	695a      	ldr	r2, [r3, #20]
 800026c:	2380      	movs	r3, #128	; 0x80
 800026e:	031b      	lsls	r3, r3, #12
 8000270:	4013      	ands	r3, r2
 8000272:	613b      	str	r3, [r7, #16]
 8000274:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000276:	4b2d      	ldr	r3, [pc, #180]	; (800032c <MX_GPIO_Init+0xe8>)
 8000278:	695a      	ldr	r2, [r3, #20]
 800027a:	4b2c      	ldr	r3, [pc, #176]	; (800032c <MX_GPIO_Init+0xe8>)
 800027c:	2180      	movs	r1, #128	; 0x80
 800027e:	03c9      	lsls	r1, r1, #15
 8000280:	430a      	orrs	r2, r1
 8000282:	615a      	str	r2, [r3, #20]
 8000284:	4b29      	ldr	r3, [pc, #164]	; (800032c <MX_GPIO_Init+0xe8>)
 8000286:	695a      	ldr	r2, [r3, #20]
 8000288:	2380      	movs	r3, #128	; 0x80
 800028a:	03db      	lsls	r3, r3, #15
 800028c:	4013      	ands	r3, r2
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000292:	4b26      	ldr	r3, [pc, #152]	; (800032c <MX_GPIO_Init+0xe8>)
 8000294:	695a      	ldr	r2, [r3, #20]
 8000296:	4b25      	ldr	r3, [pc, #148]	; (800032c <MX_GPIO_Init+0xe8>)
 8000298:	2180      	movs	r1, #128	; 0x80
 800029a:	0289      	lsls	r1, r1, #10
 800029c:	430a      	orrs	r2, r1
 800029e:	615a      	str	r2, [r3, #20]
 80002a0:	4b22      	ldr	r3, [pc, #136]	; (800032c <MX_GPIO_Init+0xe8>)
 80002a2:	695a      	ldr	r2, [r3, #20]
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	029b      	lsls	r3, r3, #10
 80002a8:	4013      	ands	r3, r2
 80002aa:	60bb      	str	r3, [r7, #8]
 80002ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ae:	4b1f      	ldr	r3, [pc, #124]	; (800032c <MX_GPIO_Init+0xe8>)
 80002b0:	695a      	ldr	r2, [r3, #20]
 80002b2:	4b1e      	ldr	r3, [pc, #120]	; (800032c <MX_GPIO_Init+0xe8>)
 80002b4:	2180      	movs	r1, #128	; 0x80
 80002b6:	02c9      	lsls	r1, r1, #11
 80002b8:	430a      	orrs	r2, r1
 80002ba:	615a      	str	r2, [r3, #20]
 80002bc:	4b1b      	ldr	r3, [pc, #108]	; (800032c <MX_GPIO_Init+0xe8>)
 80002be:	695a      	ldr	r2, [r3, #20]
 80002c0:	2380      	movs	r3, #128	; 0x80
 80002c2:	02db      	lsls	r3, r3, #11
 80002c4:	4013      	ands	r3, r2
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002ca:	2390      	movs	r3, #144	; 0x90
 80002cc:	05db      	lsls	r3, r3, #23
 80002ce:	2200      	movs	r2, #0
 80002d0:	2120      	movs	r1, #32
 80002d2:	0018      	movs	r0, r3
 80002d4:	f000 fd5e 	bl	8000d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	2280      	movs	r2, #128	; 0x80
 80002dc:	0192      	lsls	r2, r2, #6
 80002de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	2284      	movs	r2, #132	; 0x84
 80002e4:	0392      	lsls	r2, r2, #14
 80002e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e8:	193b      	adds	r3, r7, r4
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002ee:	193b      	adds	r3, r7, r4
 80002f0:	4a0f      	ldr	r2, [pc, #60]	; (8000330 <MX_GPIO_Init+0xec>)
 80002f2:	0019      	movs	r1, r3
 80002f4:	0010      	movs	r0, r2
 80002f6:	f000 fbd5 	bl	8000aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002fa:	0021      	movs	r1, r4
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2220      	movs	r2, #32
 8000300:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2201      	movs	r2, #1
 8000306:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2200      	movs	r2, #0
 8000312:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000314:	187a      	adds	r2, r7, r1
 8000316:	2390      	movs	r3, #144	; 0x90
 8000318:	05db      	lsls	r3, r3, #23
 800031a:	0011      	movs	r1, r2
 800031c:	0018      	movs	r0, r3
 800031e:	f000 fbc1 	bl	8000aa4 <HAL_GPIO_Init>

}
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	46bd      	mov	sp, r7
 8000326:	b00b      	add	sp, #44	; 0x2c
 8000328:	bd90      	pop	{r4, r7, pc}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	40021000 	.word	0x40021000
 8000330:	48000800 	.word	0x48000800

08000334 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MX_I2C1_Init+0x74>)
 800033a:	4a1c      	ldr	r2, [pc, #112]	; (80003ac <MX_I2C1_Init+0x78>)
 800033c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800033e:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000340:	4a1b      	ldr	r2, [pc, #108]	; (80003b0 <MX_I2C1_Init+0x7c>)
 8000342:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000344:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800034a:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <MX_I2C1_Init+0x74>)
 800034c:	2201      	movs	r2, #1
 800034e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000350:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000352:	2200      	movs	r2, #0
 8000354:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000356:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000358:	2200      	movs	r2, #0
 800035a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800035c:	4b12      	ldr	r3, [pc, #72]	; (80003a8 <MX_I2C1_Init+0x74>)
 800035e:	2200      	movs	r2, #0
 8000360:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000362:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000364:	2200      	movs	r2, #0
 8000366:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000368:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <MX_I2C1_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000370:	0018      	movs	r0, r3
 8000372:	f000 fd47 	bl	8000e04 <HAL_I2C_Init>
 8000376:	1e03      	subs	r3, r0, #0
 8000378:	d001      	beq.n	800037e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800037a:	f000 f928 	bl	80005ce <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800037e:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000380:	2100      	movs	r1, #0
 8000382:	0018      	movs	r0, r3
 8000384:	f001 fb30 	bl	80019e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000388:	1e03      	subs	r3, r0, #0
 800038a:	d001      	beq.n	8000390 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800038c:	f000 f91f 	bl	80005ce <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000392:	2100      	movs	r1, #0
 8000394:	0018      	movs	r0, r3
 8000396:	f001 fb73 	bl	8001a80 <HAL_I2CEx_ConfigDigitalFilter>
 800039a:	1e03      	subs	r3, r0, #0
 800039c:	d001      	beq.n	80003a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800039e:	f000 f916 	bl	80005ce <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	20000078 	.word	0x20000078
 80003ac:	40005400 	.word	0x40005400
 80003b0:	2000090e 	.word	0x2000090e

080003b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003b4:	b590      	push	{r4, r7, lr}
 80003b6:	b08b      	sub	sp, #44	; 0x2c
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003bc:	2414      	movs	r4, #20
 80003be:	193b      	adds	r3, r7, r4
 80003c0:	0018      	movs	r0, r3
 80003c2:	2314      	movs	r3, #20
 80003c4:	001a      	movs	r2, r3
 80003c6:	2100      	movs	r1, #0
 80003c8:	f002 ff0c 	bl	80031e4 <memset>
  if(i2cHandle->Instance==I2C1)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a1c      	ldr	r2, [pc, #112]	; (8000444 <HAL_I2C_MspInit+0x90>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d131      	bne.n	800043a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d6:	4b1c      	ldr	r3, [pc, #112]	; (8000448 <HAL_I2C_MspInit+0x94>)
 80003d8:	695a      	ldr	r2, [r3, #20]
 80003da:	4b1b      	ldr	r3, [pc, #108]	; (8000448 <HAL_I2C_MspInit+0x94>)
 80003dc:	2180      	movs	r1, #128	; 0x80
 80003de:	02c9      	lsls	r1, r1, #11
 80003e0:	430a      	orrs	r2, r1
 80003e2:	615a      	str	r2, [r3, #20]
 80003e4:	4b18      	ldr	r3, [pc, #96]	; (8000448 <HAL_I2C_MspInit+0x94>)
 80003e6:	695a      	ldr	r2, [r3, #20]
 80003e8:	2380      	movs	r3, #128	; 0x80
 80003ea:	02db      	lsls	r3, r3, #11
 80003ec:	4013      	ands	r3, r2
 80003ee:	613b      	str	r3, [r7, #16]
 80003f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80003f2:	0021      	movs	r1, r4
 80003f4:	187b      	adds	r3, r7, r1
 80003f6:	22c0      	movs	r2, #192	; 0xc0
 80003f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2212      	movs	r2, #18
 80003fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000400:	187b      	adds	r3, r7, r1
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000406:	187b      	adds	r3, r7, r1
 8000408:	2203      	movs	r2, #3
 800040a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800040c:	187b      	adds	r3, r7, r1
 800040e:	2201      	movs	r2, #1
 8000410:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000412:	187b      	adds	r3, r7, r1
 8000414:	4a0d      	ldr	r2, [pc, #52]	; (800044c <HAL_I2C_MspInit+0x98>)
 8000416:	0019      	movs	r1, r3
 8000418:	0010      	movs	r0, r2
 800041a:	f000 fb43 	bl	8000aa4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800041e:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <HAL_I2C_MspInit+0x94>)
 8000420:	69da      	ldr	r2, [r3, #28]
 8000422:	4b09      	ldr	r3, [pc, #36]	; (8000448 <HAL_I2C_MspInit+0x94>)
 8000424:	2180      	movs	r1, #128	; 0x80
 8000426:	0389      	lsls	r1, r1, #14
 8000428:	430a      	orrs	r2, r1
 800042a:	61da      	str	r2, [r3, #28]
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <HAL_I2C_MspInit+0x94>)
 800042e:	69da      	ldr	r2, [r3, #28]
 8000430:	2380      	movs	r3, #128	; 0x80
 8000432:	039b      	lsls	r3, r3, #14
 8000434:	4013      	ands	r3, r2
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b00b      	add	sp, #44	; 0x2c
 8000440:	bd90      	pop	{r4, r7, pc}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	40005400 	.word	0x40005400
 8000448:	40021000 	.word	0x40021000
 800044c:	48000400 	.word	0x48000400

08000450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000454:	f000 f9ea 	bl	800082c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000458:	f000 f85c 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800045c:	f7ff fef2 	bl	8000244 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000460:	f000 f93e 	bl	80006e0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000464:	f7ff ff66 	bl	8000334 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(2000);
 8000468:	23fa      	movs	r3, #250	; 0xfa
 800046a:	00db      	lsls	r3, r3, #3
 800046c:	0018      	movs	r0, r3
 800046e:	f000 fa41 	bl	80008f4 <HAL_Delay>
  setGainCoefficient(25);
 8000472:	2019      	movs	r0, #25
 8000474:	f002 fe7e 	bl	8003174 <setGainCoefficient>
  HAL_Delay(2000);
 8000478:	23fa      	movs	r3, #250	; 0xfa
 800047a:	00db      	lsls	r3, r3, #3
 800047c:	0018      	movs	r0, r3
 800047e:	f000 fa39 	bl	80008f4 <HAL_Delay>
  HAL_UART_Transmit(&huart2, (uint8_t*)"Hello_world",11,0xffffff);
 8000482:	4b1f      	ldr	r3, [pc, #124]	; (8000500 <main+0xb0>)
 8000484:	491f      	ldr	r1, [pc, #124]	; (8000504 <main+0xb4>)
 8000486:	4820      	ldr	r0, [pc, #128]	; (8000508 <main+0xb8>)
 8000488:	220b      	movs	r2, #11
 800048a:	f002 f989 	bl	80027a0 <HAL_UART_Transmit>
  sprintf(uart_data,"cnt_data: %d \r\n\0",getGainCoefficient());
 800048e:	f002 fe5f 	bl	8003150 <getGainCoefficient>
 8000492:	0003      	movs	r3, r0
 8000494:	001a      	movs	r2, r3
 8000496:	491d      	ldr	r1, [pc, #116]	; (800050c <main+0xbc>)
 8000498:	4b1d      	ldr	r3, [pc, #116]	; (8000510 <main+0xc0>)
 800049a:	0018      	movs	r0, r3
 800049c:	f002 fe82 	bl	80031a4 <siprintf>
  HAL_UART_Transmit(&huart2, (const char *)uart_data,strlen(uart_data),0xffffff);
 80004a0:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <main+0xc0>)
 80004a2:	0018      	movs	r0, r3
 80004a4:	f7ff fe30 	bl	8000108 <strlen>
 80004a8:	0003      	movs	r3, r0
 80004aa:	b29a      	uxth	r2, r3
 80004ac:	4b14      	ldr	r3, [pc, #80]	; (8000500 <main+0xb0>)
 80004ae:	4918      	ldr	r1, [pc, #96]	; (8000510 <main+0xc0>)
 80004b0:	4815      	ldr	r0, [pc, #84]	; (8000508 <main+0xb8>)
 80004b2:	f002 f975 	bl	80027a0 <HAL_UART_Transmit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t dev_add;

	  sprintf(uart_data,"cnt_data: %d \r\n\0",countVal());
 80004b6:	f002 fe0d 	bl	80030d4 <countVal>
 80004ba:	0003      	movs	r3, r0
 80004bc:	001a      	movs	r2, r3
 80004be:	4913      	ldr	r1, [pc, #76]	; (800050c <main+0xbc>)
 80004c0:	4b13      	ldr	r3, [pc, #76]	; (8000510 <main+0xc0>)
 80004c2:	0018      	movs	r0, r3
 80004c4:	f002 fe6e 	bl	80031a4 <siprintf>
	  HAL_UART_Transmit(&huart2, (const char *)uart_data,strlen(uart_data),0xffffff);
 80004c8:	4b11      	ldr	r3, [pc, #68]	; (8000510 <main+0xc0>)
 80004ca:	0018      	movs	r0, r3
 80004cc:	f7ff fe1c 	bl	8000108 <strlen>
 80004d0:	0003      	movs	r3, r0
 80004d2:	b29a      	uxth	r2, r3
 80004d4:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <main+0xb0>)
 80004d6:	490e      	ldr	r1, [pc, #56]	; (8000510 <main+0xc0>)
 80004d8:	480b      	ldr	r0, [pc, #44]	; (8000508 <main+0xb8>)
 80004da:	f002 f961 	bl	80027a0 <HAL_UART_Transmit>
	  if(getButtonDetect()){
 80004de:	f002 fe13 	bl	8003108 <getButtonDetect>
 80004e2:	1e03      	subs	r3, r0, #0
 80004e4:	d0e7      	beq.n	80004b6 <main+0x66>

		  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80004e6:	2390      	movs	r3, #144	; 0x90
 80004e8:	05db      	lsls	r3, r3, #23
 80004ea:	2120      	movs	r1, #32
 80004ec:	0018      	movs	r0, r3
 80004ee:	f000 fc6e 	bl	8000dce <HAL_GPIO_TogglePin>
          HAL_Delay(1000);
 80004f2:	23fa      	movs	r3, #250	; 0xfa
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	0018      	movs	r0, r3
 80004f8:	f000 f9fc 	bl	80008f4 <HAL_Delay>
  {
 80004fc:	e7db      	b.n	80004b6 <main+0x66>
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	00ffffff 	.word	0x00ffffff
 8000504:	08003b08 	.word	0x08003b08
 8000508:	20000134 	.word	0x20000134
 800050c:	08003b14 	.word	0x08003b14
 8000510:	200000cc 	.word	0x200000cc

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b099      	sub	sp, #100	; 0x64
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	242c      	movs	r4, #44	; 0x2c
 800051c:	193b      	adds	r3, r7, r4
 800051e:	0018      	movs	r0, r3
 8000520:	2334      	movs	r3, #52	; 0x34
 8000522:	001a      	movs	r2, r3
 8000524:	2100      	movs	r1, #0
 8000526:	f002 fe5d 	bl	80031e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052a:	231c      	movs	r3, #28
 800052c:	18fb      	adds	r3, r7, r3
 800052e:	0018      	movs	r0, r3
 8000530:	2310      	movs	r3, #16
 8000532:	001a      	movs	r2, r3
 8000534:	2100      	movs	r1, #0
 8000536:	f002 fe55 	bl	80031e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800053a:	003b      	movs	r3, r7
 800053c:	0018      	movs	r0, r3
 800053e:	231c      	movs	r3, #28
 8000540:	001a      	movs	r2, r3
 8000542:	2100      	movs	r1, #0
 8000544:	f002 fe4e 	bl	80031e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000548:	0021      	movs	r1, r4
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2222      	movs	r2, #34	; 0x22
 800054e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2201      	movs	r2, #1
 8000554:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2201      	movs	r2, #1
 800055a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2210      	movs	r2, #16
 8000560:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2200      	movs	r2, #0
 8000566:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000568:	187b      	adds	r3, r7, r1
 800056a:	0018      	movs	r0, r3
 800056c:	f001 fad4 	bl	8001b18 <HAL_RCC_OscConfig>
 8000570:	1e03      	subs	r3, r0, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000574:	f000 f82b 	bl	80005ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000578:	211c      	movs	r1, #28
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2207      	movs	r2, #7
 800057e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2203      	movs	r2, #3
 8000584:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2101      	movs	r1, #1
 8000596:	0018      	movs	r0, r3
 8000598:	f001 fe44 	bl	8002224 <HAL_RCC_ClockConfig>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005a0:	f000 f815 	bl	80005ce <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80005a4:	003b      	movs	r3, r7
 80005a6:	2222      	movs	r2, #34	; 0x22
 80005a8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005aa:	003b      	movs	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80005b0:	003b      	movs	r3, r7
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b6:	003b      	movs	r3, r7
 80005b8:	0018      	movs	r0, r3
 80005ba:	f001 ff9f 	bl	80024fc <HAL_RCCEx_PeriphCLKConfig>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005c2:	f000 f804 	bl	80005ce <Error_Handler>
  }
}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b019      	add	sp, #100	; 0x64
 80005cc:	bd90      	pop	{r4, r7, pc}

080005ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d2:	b672      	cpsid	i
}
 80005d4:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80005d6:	2390      	movs	r3, #144	; 0x90
 80005d8:	05db      	lsls	r3, r3, #23
 80005da:	2120      	movs	r1, #32
 80005dc:	0018      	movs	r0, r3
 80005de:	f000 fbf6 	bl	8000dce <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80005e2:	23fa      	movs	r3, #250	; 0xfa
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	0018      	movs	r0, r3
 80005e8:	f000 f984 	bl	80008f4 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80005ec:	e7f3      	b.n	80005d6 <Error_Handler+0x8>
	...

080005f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <HAL_MspInit+0x44>)
 80005f8:	699a      	ldr	r2, [r3, #24]
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <HAL_MspInit+0x44>)
 80005fc:	2101      	movs	r1, #1
 80005fe:	430a      	orrs	r2, r1
 8000600:	619a      	str	r2, [r3, #24]
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <HAL_MspInit+0x44>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	2201      	movs	r2, #1
 8000608:	4013      	ands	r3, r2
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <HAL_MspInit+0x44>)
 8000610:	69da      	ldr	r2, [r3, #28]
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <HAL_MspInit+0x44>)
 8000614:	2180      	movs	r1, #128	; 0x80
 8000616:	0549      	lsls	r1, r1, #21
 8000618:	430a      	orrs	r2, r1
 800061a:	61da      	str	r2, [r3, #28]
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <HAL_MspInit+0x44>)
 800061e:	69da      	ldr	r2, [r3, #28]
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	055b      	lsls	r3, r3, #21
 8000624:	4013      	ands	r3, r2
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b002      	add	sp, #8
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	40021000 	.word	0x40021000

08000638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800063c:	e7fe      	b.n	800063c <NMI_Handler+0x4>

0800063e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000642:	e7fe      	b.n	8000642 <HardFault_Handler+0x4>

08000644 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000648:	46c0      	nop			; (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800065c:	f000 f92e 	bl	80008bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000660:	46c0      	nop			; (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000670:	4a14      	ldr	r2, [pc, #80]	; (80006c4 <_sbrk+0x5c>)
 8000672:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <_sbrk+0x60>)
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800067c:	4b13      	ldr	r3, [pc, #76]	; (80006cc <_sbrk+0x64>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d102      	bne.n	800068a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <_sbrk+0x64>)
 8000686:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <_sbrk+0x68>)
 8000688:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <_sbrk+0x64>)
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	18d3      	adds	r3, r2, r3
 8000692:	693a      	ldr	r2, [r7, #16]
 8000694:	429a      	cmp	r2, r3
 8000696:	d207      	bcs.n	80006a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000698:	f002 fdac 	bl	80031f4 <__errno>
 800069c:	0003      	movs	r3, r0
 800069e:	220c      	movs	r2, #12
 80006a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006a2:	2301      	movs	r3, #1
 80006a4:	425b      	negs	r3, r3
 80006a6:	e009      	b.n	80006bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <_sbrk+0x64>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <_sbrk+0x64>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	18d2      	adds	r2, r2, r3
 80006b6:	4b05      	ldr	r3, [pc, #20]	; (80006cc <_sbrk+0x64>)
 80006b8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80006ba:	68fb      	ldr	r3, [r7, #12]
}
 80006bc:	0018      	movs	r0, r3
 80006be:	46bd      	mov	sp, r7
 80006c0:	b006      	add	sp, #24
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20004000 	.word	0x20004000
 80006c8:	00000400 	.word	0x00000400
 80006cc:	20000130 	.word	0x20000130
 80006d0:	20000308 	.word	0x20000308

080006d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e4:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_USART2_UART_Init+0x58>)
 80006e6:	4a15      	ldr	r2, [pc, #84]	; (800073c <MX_USART2_UART_Init+0x5c>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_USART2_UART_Init+0x58>)
 80006ec:	22e1      	movs	r2, #225	; 0xe1
 80006ee:	0252      	lsls	r2, r2, #9
 80006f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_USART2_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_USART2_UART_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_USART2_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000724:	0018      	movs	r0, r3
 8000726:	f001 ffe7 	bl	80026f8 <HAL_UART_Init>
 800072a:	1e03      	subs	r3, r0, #0
 800072c:	d001      	beq.n	8000732 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800072e:	f7ff ff4e 	bl	80005ce <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000134 	.word	0x20000134
 800073c:	40004400 	.word	0x40004400

08000740 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b08b      	sub	sp, #44	; 0x2c
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	2414      	movs	r4, #20
 800074a:	193b      	adds	r3, r7, r4
 800074c:	0018      	movs	r0, r3
 800074e:	2314      	movs	r3, #20
 8000750:	001a      	movs	r2, r3
 8000752:	2100      	movs	r1, #0
 8000754:	f002 fd46 	bl	80031e4 <memset>
  if(uartHandle->Instance==USART2)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a1c      	ldr	r2, [pc, #112]	; (80007d0 <HAL_UART_MspInit+0x90>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d132      	bne.n	80007c8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <HAL_UART_MspInit+0x94>)
 8000764:	69da      	ldr	r2, [r3, #28]
 8000766:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <HAL_UART_MspInit+0x94>)
 8000768:	2180      	movs	r1, #128	; 0x80
 800076a:	0289      	lsls	r1, r1, #10
 800076c:	430a      	orrs	r2, r1
 800076e:	61da      	str	r2, [r3, #28]
 8000770:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <HAL_UART_MspInit+0x94>)
 8000772:	69da      	ldr	r2, [r3, #28]
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	029b      	lsls	r3, r3, #10
 8000778:	4013      	ands	r3, r2
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <HAL_UART_MspInit+0x94>)
 8000780:	695a      	ldr	r2, [r3, #20]
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <HAL_UART_MspInit+0x94>)
 8000784:	2180      	movs	r1, #128	; 0x80
 8000786:	0289      	lsls	r1, r1, #10
 8000788:	430a      	orrs	r2, r1
 800078a:	615a      	str	r2, [r3, #20]
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <HAL_UART_MspInit+0x94>)
 800078e:	695a      	ldr	r2, [r3, #20]
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	029b      	lsls	r3, r3, #10
 8000794:	4013      	ands	r3, r2
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800079a:	0021      	movs	r1, r4
 800079c:	187b      	adds	r3, r7, r1
 800079e:	220c      	movs	r2, #12
 80007a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2202      	movs	r2, #2
 80007a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2201      	movs	r2, #1
 80007b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	187a      	adds	r2, r7, r1
 80007bc:	2390      	movs	r3, #144	; 0x90
 80007be:	05db      	lsls	r3, r3, #23
 80007c0:	0011      	movs	r1, r2
 80007c2:	0018      	movs	r0, r3
 80007c4:	f000 f96e 	bl	8000aa4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b00b      	add	sp, #44	; 0x2c
 80007ce:	bd90      	pop	{r4, r7, pc}
 80007d0:	40004400 	.word	0x40004400
 80007d4:	40021000 	.word	0x40021000

080007d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007d8:	480d      	ldr	r0, [pc, #52]	; (8000810 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007da:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007dc:	f7ff ff7a 	bl	80006d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e0:	480c      	ldr	r0, [pc, #48]	; (8000814 <LoopForever+0x6>)
  ldr r1, =_edata
 80007e2:	490d      	ldr	r1, [pc, #52]	; (8000818 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007e4:	4a0d      	ldr	r2, [pc, #52]	; (800081c <LoopForever+0xe>)
  movs r3, #0
 80007e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e8:	e002      	b.n	80007f0 <LoopCopyDataInit>

080007ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ee:	3304      	adds	r3, #4

080007f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f4:	d3f9      	bcc.n	80007ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007f8:	4c0a      	ldr	r4, [pc, #40]	; (8000824 <LoopForever+0x16>)
  movs r3, #0
 80007fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007fc:	e001      	b.n	8000802 <LoopFillZerobss>

080007fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000800:	3204      	adds	r2, #4

08000802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000804:	d3fb      	bcc.n	80007fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000806:	f002 fcfb 	bl	8003200 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800080a:	f7ff fe21 	bl	8000450 <main>

0800080e <LoopForever>:

LoopForever:
    b LoopForever
 800080e:	e7fe      	b.n	800080e <LoopForever>
  ldr   r0, =_estack
 8000810:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000818:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800081c:	08003b9c 	.word	0x08003b9c
  ldr r2, =_sbss
 8000820:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000824:	20000308 	.word	0x20000308

08000828 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000828:	e7fe      	b.n	8000828 <ADC1_COMP_IRQHandler>
	...

0800082c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <HAL_Init+0x24>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_Init+0x24>)
 8000836:	2110      	movs	r1, #16
 8000838:	430a      	orrs	r2, r1
 800083a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800083c:	2000      	movs	r0, #0
 800083e:	f000 f809 	bl	8000854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000842:	f7ff fed5 	bl	80005f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000846:	2300      	movs	r3, #0
}
 8000848:	0018      	movs	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	40022000 	.word	0x40022000

08000854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <HAL_InitTick+0x5c>)
 800085e:	681c      	ldr	r4, [r3, #0]
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <HAL_InitTick+0x60>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	0019      	movs	r1, r3
 8000866:	23fa      	movs	r3, #250	; 0xfa
 8000868:	0098      	lsls	r0, r3, #2
 800086a:	f7ff fc5f 	bl	800012c <__udivsi3>
 800086e:	0003      	movs	r3, r0
 8000870:	0019      	movs	r1, r3
 8000872:	0020      	movs	r0, r4
 8000874:	f7ff fc5a 	bl	800012c <__udivsi3>
 8000878:	0003      	movs	r3, r0
 800087a:	0018      	movs	r0, r3
 800087c:	f000 f905 	bl	8000a8a <HAL_SYSTICK_Config>
 8000880:	1e03      	subs	r3, r0, #0
 8000882:	d001      	beq.n	8000888 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000884:	2301      	movs	r3, #1
 8000886:	e00f      	b.n	80008a8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b03      	cmp	r3, #3
 800088c:	d80b      	bhi.n	80008a6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	2301      	movs	r3, #1
 8000892:	425b      	negs	r3, r3
 8000894:	2200      	movs	r2, #0
 8000896:	0018      	movs	r0, r3
 8000898:	f000 f8e2 	bl	8000a60 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_InitTick+0x64>)
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008a2:	2300      	movs	r3, #0
 80008a4:	e000      	b.n	80008a8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
}
 80008a8:	0018      	movs	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b003      	add	sp, #12
 80008ae:	bd90      	pop	{r4, r7, pc}
 80008b0:	20000000 	.word	0x20000000
 80008b4:	20000008 	.word	0x20000008
 80008b8:	20000004 	.word	0x20000004

080008bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <HAL_IncTick+0x1c>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	001a      	movs	r2, r3
 80008c6:	4b05      	ldr	r3, [pc, #20]	; (80008dc <HAL_IncTick+0x20>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	18d2      	adds	r2, r2, r3
 80008cc:	4b03      	ldr	r3, [pc, #12]	; (80008dc <HAL_IncTick+0x20>)
 80008ce:	601a      	str	r2, [r3, #0]
}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	20000008 	.word	0x20000008
 80008dc:	200001bc 	.word	0x200001bc

080008e0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  return uwTick;
 80008e4:	4b02      	ldr	r3, [pc, #8]	; (80008f0 <HAL_GetTick+0x10>)
 80008e6:	681b      	ldr	r3, [r3, #0]
}
 80008e8:	0018      	movs	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	200001bc 	.word	0x200001bc

080008f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008fc:	f7ff fff0 	bl	80008e0 <HAL_GetTick>
 8000900:	0003      	movs	r3, r0
 8000902:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	3301      	adds	r3, #1
 800090c:	d005      	beq.n	800091a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800090e:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <HAL_Delay+0x44>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	001a      	movs	r2, r3
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	189b      	adds	r3, r3, r2
 8000918:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	f7ff ffe0 	bl	80008e0 <HAL_GetTick>
 8000920:	0002      	movs	r2, r0
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	429a      	cmp	r2, r3
 800092a:	d8f7      	bhi.n	800091c <HAL_Delay+0x28>
  {
  }
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	b004      	add	sp, #16
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	20000008 	.word	0x20000008

0800093c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	0002      	movs	r2, r0
 8000944:	6039      	str	r1, [r7, #0]
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800094a:	1dfb      	adds	r3, r7, #7
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b7f      	cmp	r3, #127	; 0x7f
 8000950:	d828      	bhi.n	80009a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000952:	4a2f      	ldr	r2, [pc, #188]	; (8000a10 <__NVIC_SetPriority+0xd4>)
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b25b      	sxtb	r3, r3
 800095a:	089b      	lsrs	r3, r3, #2
 800095c:	33c0      	adds	r3, #192	; 0xc0
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	589b      	ldr	r3, [r3, r2]
 8000962:	1dfa      	adds	r2, r7, #7
 8000964:	7812      	ldrb	r2, [r2, #0]
 8000966:	0011      	movs	r1, r2
 8000968:	2203      	movs	r2, #3
 800096a:	400a      	ands	r2, r1
 800096c:	00d2      	lsls	r2, r2, #3
 800096e:	21ff      	movs	r1, #255	; 0xff
 8000970:	4091      	lsls	r1, r2
 8000972:	000a      	movs	r2, r1
 8000974:	43d2      	mvns	r2, r2
 8000976:	401a      	ands	r2, r3
 8000978:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	019b      	lsls	r3, r3, #6
 800097e:	22ff      	movs	r2, #255	; 0xff
 8000980:	401a      	ands	r2, r3
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	0018      	movs	r0, r3
 8000988:	2303      	movs	r3, #3
 800098a:	4003      	ands	r3, r0
 800098c:	00db      	lsls	r3, r3, #3
 800098e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000990:	481f      	ldr	r0, [pc, #124]	; (8000a10 <__NVIC_SetPriority+0xd4>)
 8000992:	1dfb      	adds	r3, r7, #7
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b25b      	sxtb	r3, r3
 8000998:	089b      	lsrs	r3, r3, #2
 800099a:	430a      	orrs	r2, r1
 800099c:	33c0      	adds	r3, #192	; 0xc0
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009a2:	e031      	b.n	8000a08 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009a4:	4a1b      	ldr	r2, [pc, #108]	; (8000a14 <__NVIC_SetPriority+0xd8>)
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	0019      	movs	r1, r3
 80009ac:	230f      	movs	r3, #15
 80009ae:	400b      	ands	r3, r1
 80009b0:	3b08      	subs	r3, #8
 80009b2:	089b      	lsrs	r3, r3, #2
 80009b4:	3306      	adds	r3, #6
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	18d3      	adds	r3, r2, r3
 80009ba:	3304      	adds	r3, #4
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	1dfa      	adds	r2, r7, #7
 80009c0:	7812      	ldrb	r2, [r2, #0]
 80009c2:	0011      	movs	r1, r2
 80009c4:	2203      	movs	r2, #3
 80009c6:	400a      	ands	r2, r1
 80009c8:	00d2      	lsls	r2, r2, #3
 80009ca:	21ff      	movs	r1, #255	; 0xff
 80009cc:	4091      	lsls	r1, r2
 80009ce:	000a      	movs	r2, r1
 80009d0:	43d2      	mvns	r2, r2
 80009d2:	401a      	ands	r2, r3
 80009d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	019b      	lsls	r3, r3, #6
 80009da:	22ff      	movs	r2, #255	; 0xff
 80009dc:	401a      	ands	r2, r3
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	0018      	movs	r0, r3
 80009e4:	2303      	movs	r3, #3
 80009e6:	4003      	ands	r3, r0
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ec:	4809      	ldr	r0, [pc, #36]	; (8000a14 <__NVIC_SetPriority+0xd8>)
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	001c      	movs	r4, r3
 80009f4:	230f      	movs	r3, #15
 80009f6:	4023      	ands	r3, r4
 80009f8:	3b08      	subs	r3, #8
 80009fa:	089b      	lsrs	r3, r3, #2
 80009fc:	430a      	orrs	r2, r1
 80009fe:	3306      	adds	r3, #6
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	18c3      	adds	r3, r0, r3
 8000a04:	3304      	adds	r3, #4
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b003      	add	sp, #12
 8000a0e:	bd90      	pop	{r4, r7, pc}
 8000a10:	e000e100 	.word	0xe000e100
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	1e5a      	subs	r2, r3, #1
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	045b      	lsls	r3, r3, #17
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d301      	bcc.n	8000a30 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e010      	b.n	8000a52 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <SysTick_Config+0x44>)
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	3a01      	subs	r2, #1
 8000a36:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a38:	2301      	movs	r3, #1
 8000a3a:	425b      	negs	r3, r3
 8000a3c:	2103      	movs	r1, #3
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f7ff ff7c 	bl	800093c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <SysTick_Config+0x44>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4a:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <SysTick_Config+0x44>)
 8000a4c:	2207      	movs	r2, #7
 8000a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	0018      	movs	r0, r3
 8000a54:	46bd      	mov	sp, r7
 8000a56:	b002      	add	sp, #8
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	e000e010 	.word	0xe000e010

08000a60 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
 8000a6a:	210f      	movs	r1, #15
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	1c02      	adds	r2, r0, #0
 8000a70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	b25b      	sxtb	r3, r3
 8000a7a:	0011      	movs	r1, r2
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f7ff ff5d 	bl	800093c <__NVIC_SetPriority>
}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b004      	add	sp, #16
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	0018      	movs	r0, r3
 8000a96:	f7ff ffbf 	bl	8000a18 <SysTick_Config>
 8000a9a:	0003      	movs	r3, r0
}
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b002      	add	sp, #8
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab2:	e155      	b.n	8000d60 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2101      	movs	r1, #1
 8000aba:	697a      	ldr	r2, [r7, #20]
 8000abc:	4091      	lsls	r1, r2
 8000abe:	000a      	movs	r2, r1
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d100      	bne.n	8000acc <HAL_GPIO_Init+0x28>
 8000aca:	e146      	b.n	8000d5a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	2203      	movs	r2, #3
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d005      	beq.n	8000ae4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	2203      	movs	r2, #3
 8000ade:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ae0:	2b02      	cmp	r3, #2
 8000ae2:	d130      	bne.n	8000b46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	2203      	movs	r2, #3
 8000af0:	409a      	lsls	r2, r3
 8000af2:	0013      	movs	r3, r2
 8000af4:	43da      	mvns	r2, r3
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	4013      	ands	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	68da      	ldr	r2, [r3, #12]
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	409a      	lsls	r2, r3
 8000b06:	0013      	movs	r3, r2
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	409a      	lsls	r2, r3
 8000b20:	0013      	movs	r3, r2
 8000b22:	43da      	mvns	r2, r3
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	4013      	ands	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	091b      	lsrs	r3, r3, #4
 8000b30:	2201      	movs	r2, #1
 8000b32:	401a      	ands	r2, r3
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	409a      	lsls	r2, r3
 8000b38:	0013      	movs	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	2203      	movs	r2, #3
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	2b03      	cmp	r3, #3
 8000b50:	d017      	beq.n	8000b82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	409a      	lsls	r2, r3
 8000b60:	0013      	movs	r3, r2
 8000b62:	43da      	mvns	r2, r3
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	4013      	ands	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	689a      	ldr	r2, [r3, #8]
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	409a      	lsls	r2, r3
 8000b74:	0013      	movs	r3, r2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2203      	movs	r2, #3
 8000b88:	4013      	ands	r3, r2
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d123      	bne.n	8000bd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	08da      	lsrs	r2, r3, #3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	3208      	adds	r2, #8
 8000b96:	0092      	lsls	r2, r2, #2
 8000b98:	58d3      	ldr	r3, [r2, r3]
 8000b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	2207      	movs	r2, #7
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	220f      	movs	r2, #15
 8000ba6:	409a      	lsls	r2, r3
 8000ba8:	0013      	movs	r3, r2
 8000baa:	43da      	mvns	r2, r3
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	691a      	ldr	r2, [r3, #16]
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	2107      	movs	r1, #7
 8000bba:	400b      	ands	r3, r1
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	409a      	lsls	r2, r3
 8000bc0:	0013      	movs	r3, r2
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	08da      	lsrs	r2, r3, #3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3208      	adds	r2, #8
 8000bd0:	0092      	lsls	r2, r2, #2
 8000bd2:	6939      	ldr	r1, [r7, #16]
 8000bd4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	2203      	movs	r2, #3
 8000be2:	409a      	lsls	r2, r3
 8000be4:	0013      	movs	r3, r2
 8000be6:	43da      	mvns	r2, r3
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	401a      	ands	r2, r3
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	409a      	lsls	r2, r3
 8000bfc:	0013      	movs	r3, r2
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	23c0      	movs	r3, #192	; 0xc0
 8000c10:	029b      	lsls	r3, r3, #10
 8000c12:	4013      	ands	r3, r2
 8000c14:	d100      	bne.n	8000c18 <HAL_GPIO_Init+0x174>
 8000c16:	e0a0      	b.n	8000d5a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c18:	4b57      	ldr	r3, [pc, #348]	; (8000d78 <HAL_GPIO_Init+0x2d4>)
 8000c1a:	699a      	ldr	r2, [r3, #24]
 8000c1c:	4b56      	ldr	r3, [pc, #344]	; (8000d78 <HAL_GPIO_Init+0x2d4>)
 8000c1e:	2101      	movs	r1, #1
 8000c20:	430a      	orrs	r2, r1
 8000c22:	619a      	str	r2, [r3, #24]
 8000c24:	4b54      	ldr	r3, [pc, #336]	; (8000d78 <HAL_GPIO_Init+0x2d4>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c30:	4a52      	ldr	r2, [pc, #328]	; (8000d7c <HAL_GPIO_Init+0x2d8>)
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	089b      	lsrs	r3, r3, #2
 8000c36:	3302      	adds	r3, #2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	589b      	ldr	r3, [r3, r2]
 8000c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	2203      	movs	r2, #3
 8000c42:	4013      	ands	r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	220f      	movs	r2, #15
 8000c48:	409a      	lsls	r2, r3
 8000c4a:	0013      	movs	r3, r2
 8000c4c:	43da      	mvns	r2, r3
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	4013      	ands	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	2390      	movs	r3, #144	; 0x90
 8000c58:	05db      	lsls	r3, r3, #23
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d019      	beq.n	8000c92 <HAL_GPIO_Init+0x1ee>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a47      	ldr	r2, [pc, #284]	; (8000d80 <HAL_GPIO_Init+0x2dc>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d013      	beq.n	8000c8e <HAL_GPIO_Init+0x1ea>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a46      	ldr	r2, [pc, #280]	; (8000d84 <HAL_GPIO_Init+0x2e0>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d00d      	beq.n	8000c8a <HAL_GPIO_Init+0x1e6>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a45      	ldr	r2, [pc, #276]	; (8000d88 <HAL_GPIO_Init+0x2e4>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d007      	beq.n	8000c86 <HAL_GPIO_Init+0x1e2>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a44      	ldr	r2, [pc, #272]	; (8000d8c <HAL_GPIO_Init+0x2e8>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d101      	bne.n	8000c82 <HAL_GPIO_Init+0x1de>
 8000c7e:	2304      	movs	r3, #4
 8000c80:	e008      	b.n	8000c94 <HAL_GPIO_Init+0x1f0>
 8000c82:	2305      	movs	r3, #5
 8000c84:	e006      	b.n	8000c94 <HAL_GPIO_Init+0x1f0>
 8000c86:	2303      	movs	r3, #3
 8000c88:	e004      	b.n	8000c94 <HAL_GPIO_Init+0x1f0>
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	e002      	b.n	8000c94 <HAL_GPIO_Init+0x1f0>
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e000      	b.n	8000c94 <HAL_GPIO_Init+0x1f0>
 8000c92:	2300      	movs	r3, #0
 8000c94:	697a      	ldr	r2, [r7, #20]
 8000c96:	2103      	movs	r1, #3
 8000c98:	400a      	ands	r2, r1
 8000c9a:	0092      	lsls	r2, r2, #2
 8000c9c:	4093      	lsls	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ca4:	4935      	ldr	r1, [pc, #212]	; (8000d7c <HAL_GPIO_Init+0x2d8>)
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	089b      	lsrs	r3, r3, #2
 8000caa:	3302      	adds	r3, #2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cb2:	4b37      	ldr	r3, [pc, #220]	; (8000d90 <HAL_GPIO_Init+0x2ec>)
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685a      	ldr	r2, [r3, #4]
 8000cc6:	2380      	movs	r3, #128	; 0x80
 8000cc8:	035b      	lsls	r3, r3, #13
 8000cca:	4013      	ands	r3, r2
 8000ccc:	d003      	beq.n	8000cd6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cd6:	4b2e      	ldr	r3, [pc, #184]	; (8000d90 <HAL_GPIO_Init+0x2ec>)
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000cdc:	4b2c      	ldr	r3, [pc, #176]	; (8000d90 <HAL_GPIO_Init+0x2ec>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	43da      	mvns	r2, r3
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685a      	ldr	r2, [r3, #4]
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	039b      	lsls	r3, r3, #14
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	d003      	beq.n	8000d00 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d00:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <HAL_GPIO_Init+0x2ec>)
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000d06:	4b22      	ldr	r3, [pc, #136]	; (8000d90 <HAL_GPIO_Init+0x2ec>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	029b      	lsls	r3, r3, #10
 8000d1e:	4013      	ands	r3, r2
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d2a:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <HAL_GPIO_Init+0x2ec>)
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000d30:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <HAL_GPIO_Init+0x2ec>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	43da      	mvns	r2, r3
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	025b      	lsls	r3, r3, #9
 8000d48:	4013      	ands	r3, r2
 8000d4a:	d003      	beq.n	8000d54 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HAL_GPIO_Init+0x2ec>)
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	40da      	lsrs	r2, r3
 8000d68:	1e13      	subs	r3, r2, #0
 8000d6a:	d000      	beq.n	8000d6e <HAL_GPIO_Init+0x2ca>
 8000d6c:	e6a2      	b.n	8000ab4 <HAL_GPIO_Init+0x10>
  } 
}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b006      	add	sp, #24
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40010000 	.word	0x40010000
 8000d80:	48000400 	.word	0x48000400
 8000d84:	48000800 	.word	0x48000800
 8000d88:	48000c00 	.word	0x48000c00
 8000d8c:	48001000 	.word	0x48001000
 8000d90:	40010400 	.word	0x40010400

08000d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	0008      	movs	r0, r1
 8000d9e:	0011      	movs	r1, r2
 8000da0:	1cbb      	adds	r3, r7, #2
 8000da2:	1c02      	adds	r2, r0, #0
 8000da4:	801a      	strh	r2, [r3, #0]
 8000da6:	1c7b      	adds	r3, r7, #1
 8000da8:	1c0a      	adds	r2, r1, #0
 8000daa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dac:	1c7b      	adds	r3, r7, #1
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d004      	beq.n	8000dbe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000db4:	1cbb      	adds	r3, r7, #2
 8000db6:	881a      	ldrh	r2, [r3, #0]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dbc:	e003      	b.n	8000dc6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dbe:	1cbb      	adds	r3, r7, #2
 8000dc0:	881a      	ldrh	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	b002      	add	sp, #8
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b084      	sub	sp, #16
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	000a      	movs	r2, r1
 8000dd8:	1cbb      	adds	r3, r7, #2
 8000dda:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000de2:	1cbb      	adds	r3, r7, #2
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	4013      	ands	r3, r2
 8000dea:	041a      	lsls	r2, r3, #16
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	43db      	mvns	r3, r3
 8000df0:	1cb9      	adds	r1, r7, #2
 8000df2:	8809      	ldrh	r1, [r1, #0]
 8000df4:	400b      	ands	r3, r1
 8000df6:	431a      	orrs	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	619a      	str	r2, [r3, #24]
}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b004      	add	sp, #16
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d101      	bne.n	8000e16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e082      	b.n	8000f1c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2241      	movs	r2, #65	; 0x41
 8000e1a:	5c9b      	ldrb	r3, [r3, r2]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d107      	bne.n	8000e32 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2240      	movs	r2, #64	; 0x40
 8000e26:	2100      	movs	r1, #0
 8000e28:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f7ff fac1 	bl	80003b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2241      	movs	r2, #65	; 0x41
 8000e36:	2124      	movs	r1, #36	; 0x24
 8000e38:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2101      	movs	r1, #1
 8000e46:	438a      	bics	r2, r1
 8000e48:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4934      	ldr	r1, [pc, #208]	; (8000f24 <HAL_I2C_Init+0x120>)
 8000e54:	400a      	ands	r2, r1
 8000e56:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	689a      	ldr	r2, [r3, #8]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4931      	ldr	r1, [pc, #196]	; (8000f28 <HAL_I2C_Init+0x124>)
 8000e64:	400a      	ands	r2, r1
 8000e66:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d108      	bne.n	8000e82 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2180      	movs	r1, #128	; 0x80
 8000e7a:	0209      	lsls	r1, r1, #8
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	e007      	b.n	8000e92 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689a      	ldr	r2, [r3, #8]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2184      	movs	r1, #132	; 0x84
 8000e8c:	0209      	lsls	r1, r1, #8
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d104      	bne.n	8000ea4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2280      	movs	r2, #128	; 0x80
 8000ea0:	0112      	lsls	r2, r2, #4
 8000ea2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	491f      	ldr	r1, [pc, #124]	; (8000f2c <HAL_I2C_Init+0x128>)
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	68da      	ldr	r2, [r3, #12]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	491a      	ldr	r1, [pc, #104]	; (8000f28 <HAL_I2C_Init+0x124>)
 8000ec0:	400a      	ands	r2, r1
 8000ec2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	691a      	ldr	r2, [r3, #16]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	695b      	ldr	r3, [r3, #20]
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	430a      	orrs	r2, r1
 8000edc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69d9      	ldr	r1, [r3, #28]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6a1a      	ldr	r2, [r3, #32]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	430a      	orrs	r2, r1
 8000eec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2101      	movs	r1, #1
 8000efa:	430a      	orrs	r2, r1
 8000efc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2241      	movs	r2, #65	; 0x41
 8000f08:	2120      	movs	r1, #32
 8000f0a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2242      	movs	r2, #66	; 0x42
 8000f16:	2100      	movs	r1, #0
 8000f18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b002      	add	sp, #8
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	f0ffffff 	.word	0xf0ffffff
 8000f28:	ffff7fff 	.word	0xffff7fff
 8000f2c:	02008000 	.word	0x02008000

08000f30 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b089      	sub	sp, #36	; 0x24
 8000f34:	af02      	add	r7, sp, #8
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	000c      	movs	r4, r1
 8000f3a:	0010      	movs	r0, r2
 8000f3c:	0019      	movs	r1, r3
 8000f3e:	230a      	movs	r3, #10
 8000f40:	18fb      	adds	r3, r7, r3
 8000f42:	1c22      	adds	r2, r4, #0
 8000f44:	801a      	strh	r2, [r3, #0]
 8000f46:	2308      	movs	r3, #8
 8000f48:	18fb      	adds	r3, r7, r3
 8000f4a:	1c02      	adds	r2, r0, #0
 8000f4c:	801a      	strh	r2, [r3, #0]
 8000f4e:	1dbb      	adds	r3, r7, #6
 8000f50:	1c0a      	adds	r2, r1, #0
 8000f52:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2241      	movs	r2, #65	; 0x41
 8000f58:	5c9b      	ldrb	r3, [r3, r2]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b20      	cmp	r3, #32
 8000f5e:	d000      	beq.n	8000f62 <HAL_I2C_Mem_Write+0x32>
 8000f60:	e10c      	b.n	800117c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8000f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d004      	beq.n	8000f72 <HAL_I2C_Mem_Write+0x42>
 8000f68:	232c      	movs	r3, #44	; 0x2c
 8000f6a:	18fb      	adds	r3, r7, r3
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d105      	bne.n	8000f7e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	0092      	lsls	r2, r2, #2
 8000f78:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e0ff      	b.n	800117e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2240      	movs	r2, #64	; 0x40
 8000f82:	5c9b      	ldrb	r3, [r3, r2]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d101      	bne.n	8000f8c <HAL_I2C_Mem_Write+0x5c>
 8000f88:	2302      	movs	r3, #2
 8000f8a:	e0f8      	b.n	800117e <HAL_I2C_Mem_Write+0x24e>
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2240      	movs	r2, #64	; 0x40
 8000f90:	2101      	movs	r1, #1
 8000f92:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000f94:	f7ff fca4 	bl	80008e0 <HAL_GetTick>
 8000f98:	0003      	movs	r3, r0
 8000f9a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f9c:	2380      	movs	r3, #128	; 0x80
 8000f9e:	0219      	lsls	r1, r3, #8
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2319      	movs	r3, #25
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f000 fb0b 	bl	80015c4 <I2C_WaitOnFlagUntilTimeout>
 8000fae:	1e03      	subs	r3, r0, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e0e3      	b.n	800117e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2241      	movs	r2, #65	; 0x41
 8000fba:	2121      	movs	r1, #33	; 0x21
 8000fbc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2242      	movs	r2, #66	; 0x42
 8000fc2:	2140      	movs	r1, #64	; 0x40
 8000fc4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	222c      	movs	r2, #44	; 0x2c
 8000fd6:	18ba      	adds	r2, r7, r2
 8000fd8:	8812      	ldrh	r2, [r2, #0]
 8000fda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000fe2:	1dbb      	adds	r3, r7, #6
 8000fe4:	881c      	ldrh	r4, [r3, #0]
 8000fe6:	2308      	movs	r3, #8
 8000fe8:	18fb      	adds	r3, r7, r3
 8000fea:	881a      	ldrh	r2, [r3, #0]
 8000fec:	230a      	movs	r3, #10
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	8819      	ldrh	r1, [r3, #0]
 8000ff2:	68f8      	ldr	r0, [r7, #12]
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	9301      	str	r3, [sp, #4]
 8000ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	0023      	movs	r3, r4
 8000ffe:	f000 f9f9 	bl	80013f4 <I2C_RequestMemoryWrite>
 8001002:	1e03      	subs	r3, r0, #0
 8001004:	d005      	beq.n	8001012 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2240      	movs	r2, #64	; 0x40
 800100a:	2100      	movs	r1, #0
 800100c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e0b5      	b.n	800117e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001016:	b29b      	uxth	r3, r3
 8001018:	2bff      	cmp	r3, #255	; 0xff
 800101a:	d911      	bls.n	8001040 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	22ff      	movs	r2, #255	; 0xff
 8001020:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001026:	b2da      	uxtb	r2, r3
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	045c      	lsls	r4, r3, #17
 800102c:	230a      	movs	r3, #10
 800102e:	18fb      	adds	r3, r7, r3
 8001030:	8819      	ldrh	r1, [r3, #0]
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	2300      	movs	r3, #0
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	0023      	movs	r3, r4
 800103a:	f000 fc9b 	bl	8001974 <I2C_TransferConfig>
 800103e:	e012      	b.n	8001066 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001044:	b29a      	uxth	r2, r3
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800104e:	b2da      	uxtb	r2, r3
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	049c      	lsls	r4, r3, #18
 8001054:	230a      	movs	r3, #10
 8001056:	18fb      	adds	r3, r7, r3
 8001058:	8819      	ldrh	r1, [r3, #0]
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	2300      	movs	r3, #0
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	0023      	movs	r3, r4
 8001062:	f000 fc87 	bl	8001974 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	0018      	movs	r0, r3
 800106e:	f000 faf7 	bl	8001660 <I2C_WaitOnTXISFlagUntilTimeout>
 8001072:	1e03      	subs	r3, r0, #0
 8001074:	d001      	beq.n	800107a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e081      	b.n	800117e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107e:	781a      	ldrb	r2, [r3, #0]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001094:	b29b      	uxth	r3, r3
 8001096:	3b01      	subs	r3, #1
 8001098:	b29a      	uxth	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010a2:	3b01      	subs	r3, #1
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d03a      	beq.n	800112a <HAL_I2C_Mem_Write+0x1fa>
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d136      	bne.n	800112a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80010bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010be:	68f8      	ldr	r0, [r7, #12]
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	0013      	movs	r3, r2
 80010c6:	2200      	movs	r2, #0
 80010c8:	2180      	movs	r1, #128	; 0x80
 80010ca:	f000 fa7b 	bl	80015c4 <I2C_WaitOnFlagUntilTimeout>
 80010ce:	1e03      	subs	r3, r0, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e053      	b.n	800117e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010da:	b29b      	uxth	r3, r3
 80010dc:	2bff      	cmp	r3, #255	; 0xff
 80010de:	d911      	bls.n	8001104 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	22ff      	movs	r2, #255	; 0xff
 80010e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	045c      	lsls	r4, r3, #17
 80010f0:	230a      	movs	r3, #10
 80010f2:	18fb      	adds	r3, r7, r3
 80010f4:	8819      	ldrh	r1, [r3, #0]
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	2300      	movs	r3, #0
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	0023      	movs	r3, r4
 80010fe:	f000 fc39 	bl	8001974 <I2C_TransferConfig>
 8001102:	e012      	b.n	800112a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001108:	b29a      	uxth	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001112:	b2da      	uxtb	r2, r3
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	049c      	lsls	r4, r3, #18
 8001118:	230a      	movs	r3, #10
 800111a:	18fb      	adds	r3, r7, r3
 800111c:	8819      	ldrh	r1, [r3, #0]
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	2300      	movs	r3, #0
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	0023      	movs	r3, r4
 8001126:	f000 fc25 	bl	8001974 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800112e:	b29b      	uxth	r3, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	d198      	bne.n	8001066 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	0018      	movs	r0, r3
 800113c:	f000 fad6 	bl	80016ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8001140:	1e03      	subs	r3, r0, #0
 8001142:	d001      	beq.n	8001148 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e01a      	b.n	800117e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2220      	movs	r2, #32
 800114e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	490b      	ldr	r1, [pc, #44]	; (8001188 <HAL_I2C_Mem_Write+0x258>)
 800115c:	400a      	ands	r2, r1
 800115e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2241      	movs	r2, #65	; 0x41
 8001164:	2120      	movs	r1, #32
 8001166:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2242      	movs	r2, #66	; 0x42
 800116c:	2100      	movs	r1, #0
 800116e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2240      	movs	r2, #64	; 0x40
 8001174:	2100      	movs	r1, #0
 8001176:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001178:	2300      	movs	r3, #0
 800117a:	e000      	b.n	800117e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800117c:	2302      	movs	r3, #2
  }
}
 800117e:	0018      	movs	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	b007      	add	sp, #28
 8001184:	bd90      	pop	{r4, r7, pc}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	fe00e800 	.word	0xfe00e800

0800118c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b089      	sub	sp, #36	; 0x24
 8001190:	af02      	add	r7, sp, #8
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	000c      	movs	r4, r1
 8001196:	0010      	movs	r0, r2
 8001198:	0019      	movs	r1, r3
 800119a:	230a      	movs	r3, #10
 800119c:	18fb      	adds	r3, r7, r3
 800119e:	1c22      	adds	r2, r4, #0
 80011a0:	801a      	strh	r2, [r3, #0]
 80011a2:	2308      	movs	r3, #8
 80011a4:	18fb      	adds	r3, r7, r3
 80011a6:	1c02      	adds	r2, r0, #0
 80011a8:	801a      	strh	r2, [r3, #0]
 80011aa:	1dbb      	adds	r3, r7, #6
 80011ac:	1c0a      	adds	r2, r1, #0
 80011ae:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2241      	movs	r2, #65	; 0x41
 80011b4:	5c9b      	ldrb	r3, [r3, r2]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b20      	cmp	r3, #32
 80011ba:	d000      	beq.n	80011be <HAL_I2C_Mem_Read+0x32>
 80011bc:	e110      	b.n	80013e0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80011be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d004      	beq.n	80011ce <HAL_I2C_Mem_Read+0x42>
 80011c4:	232c      	movs	r3, #44	; 0x2c
 80011c6:	18fb      	adds	r3, r7, r3
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d105      	bne.n	80011da <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2280      	movs	r2, #128	; 0x80
 80011d2:	0092      	lsls	r2, r2, #2
 80011d4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e103      	b.n	80013e2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2240      	movs	r2, #64	; 0x40
 80011de:	5c9b      	ldrb	r3, [r3, r2]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d101      	bne.n	80011e8 <HAL_I2C_Mem_Read+0x5c>
 80011e4:	2302      	movs	r3, #2
 80011e6:	e0fc      	b.n	80013e2 <HAL_I2C_Mem_Read+0x256>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2240      	movs	r2, #64	; 0x40
 80011ec:	2101      	movs	r1, #1
 80011ee:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011f0:	f7ff fb76 	bl	80008e0 <HAL_GetTick>
 80011f4:	0003      	movs	r3, r0
 80011f6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	0219      	lsls	r1, r3, #8
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2319      	movs	r3, #25
 8001204:	2201      	movs	r2, #1
 8001206:	f000 f9dd 	bl	80015c4 <I2C_WaitOnFlagUntilTimeout>
 800120a:	1e03      	subs	r3, r0, #0
 800120c:	d001      	beq.n	8001212 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e0e7      	b.n	80013e2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2241      	movs	r2, #65	; 0x41
 8001216:	2122      	movs	r1, #34	; 0x22
 8001218:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2242      	movs	r2, #66	; 0x42
 800121e:	2140      	movs	r1, #64	; 0x40
 8001220:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2200      	movs	r2, #0
 8001226:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	222c      	movs	r2, #44	; 0x2c
 8001232:	18ba      	adds	r2, r7, r2
 8001234:	8812      	ldrh	r2, [r2, #0]
 8001236:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2200      	movs	r2, #0
 800123c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800123e:	1dbb      	adds	r3, r7, #6
 8001240:	881c      	ldrh	r4, [r3, #0]
 8001242:	2308      	movs	r3, #8
 8001244:	18fb      	adds	r3, r7, r3
 8001246:	881a      	ldrh	r2, [r3, #0]
 8001248:	230a      	movs	r3, #10
 800124a:	18fb      	adds	r3, r7, r3
 800124c:	8819      	ldrh	r1, [r3, #0]
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	0023      	movs	r3, r4
 800125a:	f000 f92f 	bl	80014bc <I2C_RequestMemoryRead>
 800125e:	1e03      	subs	r3, r0, #0
 8001260:	d005      	beq.n	800126e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2240      	movs	r2, #64	; 0x40
 8001266:	2100      	movs	r1, #0
 8001268:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e0b9      	b.n	80013e2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001272:	b29b      	uxth	r3, r3
 8001274:	2bff      	cmp	r3, #255	; 0xff
 8001276:	d911      	bls.n	800129c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	22ff      	movs	r2, #255	; 0xff
 800127c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001282:	b2da      	uxtb	r2, r3
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	045c      	lsls	r4, r3, #17
 8001288:	230a      	movs	r3, #10
 800128a:	18fb      	adds	r3, r7, r3
 800128c:	8819      	ldrh	r1, [r3, #0]
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	4b56      	ldr	r3, [pc, #344]	; (80013ec <HAL_I2C_Mem_Read+0x260>)
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	0023      	movs	r3, r4
 8001296:	f000 fb6d 	bl	8001974 <I2C_TransferConfig>
 800129a:	e012      	b.n	80012c2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	049c      	lsls	r4, r3, #18
 80012b0:	230a      	movs	r3, #10
 80012b2:	18fb      	adds	r3, r7, r3
 80012b4:	8819      	ldrh	r1, [r3, #0]
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	4b4c      	ldr	r3, [pc, #304]	; (80013ec <HAL_I2C_Mem_Read+0x260>)
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	0023      	movs	r3, r4
 80012be:	f000 fb59 	bl	8001974 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80012c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	0013      	movs	r3, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	2104      	movs	r1, #4
 80012d0:	f000 f978 	bl	80015c4 <I2C_WaitOnFlagUntilTimeout>
 80012d4:	1e03      	subs	r3, r0, #0
 80012d6:	d001      	beq.n	80012dc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e082      	b.n	80013e2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f8:	3b01      	subs	r3, #1
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001304:	b29b      	uxth	r3, r3
 8001306:	3b01      	subs	r3, #1
 8001308:	b29a      	uxth	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001312:	b29b      	uxth	r3, r3
 8001314:	2b00      	cmp	r3, #0
 8001316:	d03a      	beq.n	800138e <HAL_I2C_Mem_Read+0x202>
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800131c:	2b00      	cmp	r3, #0
 800131e:	d136      	bne.n	800138e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	0013      	movs	r3, r2
 800132a:	2200      	movs	r2, #0
 800132c:	2180      	movs	r1, #128	; 0x80
 800132e:	f000 f949 	bl	80015c4 <I2C_WaitOnFlagUntilTimeout>
 8001332:	1e03      	subs	r3, r0, #0
 8001334:	d001      	beq.n	800133a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e053      	b.n	80013e2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800133e:	b29b      	uxth	r3, r3
 8001340:	2bff      	cmp	r3, #255	; 0xff
 8001342:	d911      	bls.n	8001368 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	22ff      	movs	r2, #255	; 0xff
 8001348:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800134e:	b2da      	uxtb	r2, r3
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	045c      	lsls	r4, r3, #17
 8001354:	230a      	movs	r3, #10
 8001356:	18fb      	adds	r3, r7, r3
 8001358:	8819      	ldrh	r1, [r3, #0]
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	2300      	movs	r3, #0
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	0023      	movs	r3, r4
 8001362:	f000 fb07 	bl	8001974 <I2C_TransferConfig>
 8001366:	e012      	b.n	800138e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800136c:	b29a      	uxth	r2, r3
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001376:	b2da      	uxtb	r2, r3
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	049c      	lsls	r4, r3, #18
 800137c:	230a      	movs	r3, #10
 800137e:	18fb      	adds	r3, r7, r3
 8001380:	8819      	ldrh	r1, [r3, #0]
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	2300      	movs	r3, #0
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	0023      	movs	r3, r4
 800138a:	f000 faf3 	bl	8001974 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001392:	b29b      	uxth	r3, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	d194      	bne.n	80012c2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	0018      	movs	r0, r3
 80013a0:	f000 f9a4 	bl	80016ec <I2C_WaitOnSTOPFlagUntilTimeout>
 80013a4:	1e03      	subs	r3, r0, #0
 80013a6:	d001      	beq.n	80013ac <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e01a      	b.n	80013e2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2220      	movs	r2, #32
 80013b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	490c      	ldr	r1, [pc, #48]	; (80013f0 <HAL_I2C_Mem_Read+0x264>)
 80013c0:	400a      	ands	r2, r1
 80013c2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2241      	movs	r2, #65	; 0x41
 80013c8:	2120      	movs	r1, #32
 80013ca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2242      	movs	r2, #66	; 0x42
 80013d0:	2100      	movs	r1, #0
 80013d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2240      	movs	r2, #64	; 0x40
 80013d8:	2100      	movs	r1, #0
 80013da:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80013dc:	2300      	movs	r3, #0
 80013de:	e000      	b.n	80013e2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80013e0:	2302      	movs	r3, #2
  }
}
 80013e2:	0018      	movs	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b007      	add	sp, #28
 80013e8:	bd90      	pop	{r4, r7, pc}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	80002400 	.word	0x80002400
 80013f0:	fe00e800 	.word	0xfe00e800

080013f4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80013f4:	b5b0      	push	{r4, r5, r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af02      	add	r7, sp, #8
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	000c      	movs	r4, r1
 80013fe:	0010      	movs	r0, r2
 8001400:	0019      	movs	r1, r3
 8001402:	250a      	movs	r5, #10
 8001404:	197b      	adds	r3, r7, r5
 8001406:	1c22      	adds	r2, r4, #0
 8001408:	801a      	strh	r2, [r3, #0]
 800140a:	2308      	movs	r3, #8
 800140c:	18fb      	adds	r3, r7, r3
 800140e:	1c02      	adds	r2, r0, #0
 8001410:	801a      	strh	r2, [r3, #0]
 8001412:	1dbb      	adds	r3, r7, #6
 8001414:	1c0a      	adds	r2, r1, #0
 8001416:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001418:	1dbb      	adds	r3, r7, #6
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	045c      	lsls	r4, r3, #17
 8001422:	197b      	adds	r3, r7, r5
 8001424:	8819      	ldrh	r1, [r3, #0]
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <I2C_RequestMemoryWrite+0xc4>)
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	0023      	movs	r3, r4
 800142e:	f000 faa1 	bl	8001974 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001434:	6a39      	ldr	r1, [r7, #32]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	0018      	movs	r0, r3
 800143a:	f000 f911 	bl	8001660 <I2C_WaitOnTXISFlagUntilTimeout>
 800143e:	1e03      	subs	r3, r0, #0
 8001440:	d001      	beq.n	8001446 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e033      	b.n	80014ae <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001446:	1dbb      	adds	r3, r7, #6
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d107      	bne.n	800145e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800144e:	2308      	movs	r3, #8
 8001450:	18fb      	adds	r3, r7, r3
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	b2da      	uxtb	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	629a      	str	r2, [r3, #40]	; 0x28
 800145c:	e019      	b.n	8001492 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800145e:	2308      	movs	r3, #8
 8001460:	18fb      	adds	r3, r7, r3
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	b29b      	uxth	r3, r3
 8001468:	b2da      	uxtb	r2, r3
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001472:	6a39      	ldr	r1, [r7, #32]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	0018      	movs	r0, r3
 8001478:	f000 f8f2 	bl	8001660 <I2C_WaitOnTXISFlagUntilTimeout>
 800147c:	1e03      	subs	r3, r0, #0
 800147e:	d001      	beq.n	8001484 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e014      	b.n	80014ae <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001484:	2308      	movs	r3, #8
 8001486:	18fb      	adds	r3, r7, r3
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001492:	6a3a      	ldr	r2, [r7, #32]
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	0013      	movs	r3, r2
 800149c:	2200      	movs	r2, #0
 800149e:	2180      	movs	r1, #128	; 0x80
 80014a0:	f000 f890 	bl	80015c4 <I2C_WaitOnFlagUntilTimeout>
 80014a4:	1e03      	subs	r3, r0, #0
 80014a6:	d001      	beq.n	80014ac <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e000      	b.n	80014ae <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	0018      	movs	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b004      	add	sp, #16
 80014b4:	bdb0      	pop	{r4, r5, r7, pc}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	80002000 	.word	0x80002000

080014bc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80014bc:	b5b0      	push	{r4, r5, r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af02      	add	r7, sp, #8
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	000c      	movs	r4, r1
 80014c6:	0010      	movs	r0, r2
 80014c8:	0019      	movs	r1, r3
 80014ca:	250a      	movs	r5, #10
 80014cc:	197b      	adds	r3, r7, r5
 80014ce:	1c22      	adds	r2, r4, #0
 80014d0:	801a      	strh	r2, [r3, #0]
 80014d2:	2308      	movs	r3, #8
 80014d4:	18fb      	adds	r3, r7, r3
 80014d6:	1c02      	adds	r2, r0, #0
 80014d8:	801a      	strh	r2, [r3, #0]
 80014da:	1dbb      	adds	r3, r7, #6
 80014dc:	1c0a      	adds	r2, r1, #0
 80014de:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80014e0:	1dbb      	adds	r3, r7, #6
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	197b      	adds	r3, r7, r5
 80014e8:	8819      	ldrh	r1, [r3, #0]
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	4b23      	ldr	r3, [pc, #140]	; (800157c <I2C_RequestMemoryRead+0xc0>)
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2300      	movs	r3, #0
 80014f2:	f000 fa3f 	bl	8001974 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f8:	6a39      	ldr	r1, [r7, #32]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	0018      	movs	r0, r3
 80014fe:	f000 f8af 	bl	8001660 <I2C_WaitOnTXISFlagUntilTimeout>
 8001502:	1e03      	subs	r3, r0, #0
 8001504:	d001      	beq.n	800150a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e033      	b.n	8001572 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800150a:	1dbb      	adds	r3, r7, #6
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d107      	bne.n	8001522 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001512:	2308      	movs	r3, #8
 8001514:	18fb      	adds	r3, r7, r3
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
 8001520:	e019      	b.n	8001556 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001522:	2308      	movs	r3, #8
 8001524:	18fb      	adds	r3, r7, r3
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	b29b      	uxth	r3, r3
 800152c:	b2da      	uxtb	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001536:	6a39      	ldr	r1, [r7, #32]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	0018      	movs	r0, r3
 800153c:	f000 f890 	bl	8001660 <I2C_WaitOnTXISFlagUntilTimeout>
 8001540:	1e03      	subs	r3, r0, #0
 8001542:	d001      	beq.n	8001548 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e014      	b.n	8001572 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001548:	2308      	movs	r3, #8
 800154a:	18fb      	adds	r3, r7, r3
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	b2da      	uxtb	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001556:	6a3a      	ldr	r2, [r7, #32]
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	0013      	movs	r3, r2
 8001560:	2200      	movs	r2, #0
 8001562:	2140      	movs	r1, #64	; 0x40
 8001564:	f000 f82e 	bl	80015c4 <I2C_WaitOnFlagUntilTimeout>
 8001568:	1e03      	subs	r3, r0, #0
 800156a:	d001      	beq.n	8001570 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e000      	b.n	8001572 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	0018      	movs	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	b004      	add	sp, #16
 8001578:	bdb0      	pop	{r4, r5, r7, pc}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	80002000 	.word	0x80002000

08001580 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	2202      	movs	r2, #2
 8001590:	4013      	ands	r3, r2
 8001592:	2b02      	cmp	r3, #2
 8001594:	d103      	bne.n	800159e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2200      	movs	r2, #0
 800159c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	2201      	movs	r2, #1
 80015a6:	4013      	ands	r3, r2
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d007      	beq.n	80015bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	699a      	ldr	r2, [r3, #24]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2101      	movs	r1, #1
 80015b8:	430a      	orrs	r2, r1
 80015ba:	619a      	str	r2, [r3, #24]
  }
}
 80015bc:	46c0      	nop			; (mov r8, r8)
 80015be:	46bd      	mov	sp, r7
 80015c0:	b002      	add	sp, #8
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	1dfb      	adds	r3, r7, #7
 80015d2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015d4:	e030      	b.n	8001638 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	d02d      	beq.n	8001638 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015dc:	f7ff f980 	bl	80008e0 <HAL_GetTick>
 80015e0:	0002      	movs	r2, r0
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d302      	bcc.n	80015f2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d122      	bne.n	8001638 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	68ba      	ldr	r2, [r7, #8]
 80015fa:	4013      	ands	r3, r2
 80015fc:	68ba      	ldr	r2, [r7, #8]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	425a      	negs	r2, r3
 8001602:	4153      	adcs	r3, r2
 8001604:	b2db      	uxtb	r3, r3
 8001606:	001a      	movs	r2, r3
 8001608:	1dfb      	adds	r3, r7, #7
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d113      	bne.n	8001638 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001614:	2220      	movs	r2, #32
 8001616:	431a      	orrs	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2241      	movs	r2, #65	; 0x41
 8001620:	2120      	movs	r1, #32
 8001622:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2242      	movs	r2, #66	; 0x42
 8001628:	2100      	movs	r1, #0
 800162a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2240      	movs	r2, #64	; 0x40
 8001630:	2100      	movs	r1, #0
 8001632:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e00f      	b.n	8001658 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	4013      	ands	r3, r2
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	425a      	negs	r2, r3
 8001648:	4153      	adcs	r3, r2
 800164a:	b2db      	uxtb	r3, r3
 800164c:	001a      	movs	r2, r3
 800164e:	1dfb      	adds	r3, r7, #7
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d0bf      	beq.n	80015d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	0018      	movs	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	b004      	add	sp, #16
 800165e:	bd80      	pop	{r7, pc}

08001660 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800166c:	e032      	b.n	80016d4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	0018      	movs	r0, r3
 8001676:	f000 f87d 	bl	8001774 <I2C_IsErrorOccurred>
 800167a:	1e03      	subs	r3, r0, #0
 800167c:	d001      	beq.n	8001682 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e030      	b.n	80016e4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	3301      	adds	r3, #1
 8001686:	d025      	beq.n	80016d4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001688:	f7ff f92a 	bl	80008e0 <HAL_GetTick>
 800168c:	0002      	movs	r2, r0
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	429a      	cmp	r2, r3
 8001696:	d302      	bcc.n	800169e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d11a      	bne.n	80016d4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	2202      	movs	r2, #2
 80016a6:	4013      	ands	r3, r2
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d013      	beq.n	80016d4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b0:	2220      	movs	r2, #32
 80016b2:	431a      	orrs	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2241      	movs	r2, #65	; 0x41
 80016bc:	2120      	movs	r1, #32
 80016be:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2242      	movs	r2, #66	; 0x42
 80016c4:	2100      	movs	r1, #0
 80016c6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2240      	movs	r2, #64	; 0x40
 80016cc:	2100      	movs	r1, #0
 80016ce:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e007      	b.n	80016e4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2202      	movs	r2, #2
 80016dc:	4013      	ands	r3, r2
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d1c5      	bne.n	800166e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	0018      	movs	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b004      	add	sp, #16
 80016ea:	bd80      	pop	{r7, pc}

080016ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016f8:	e02f      	b.n	800175a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	0018      	movs	r0, r3
 8001702:	f000 f837 	bl	8001774 <I2C_IsErrorOccurred>
 8001706:	1e03      	subs	r3, r0, #0
 8001708:	d001      	beq.n	800170e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e02d      	b.n	800176a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800170e:	f7ff f8e7 	bl	80008e0 <HAL_GetTick>
 8001712:	0002      	movs	r2, r0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	68ba      	ldr	r2, [r7, #8]
 800171a:	429a      	cmp	r2, r3
 800171c:	d302      	bcc.n	8001724 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d11a      	bne.n	800175a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	2220      	movs	r2, #32
 800172c:	4013      	ands	r3, r2
 800172e:	2b20      	cmp	r3, #32
 8001730:	d013      	beq.n	800175a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	2220      	movs	r2, #32
 8001738:	431a      	orrs	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2241      	movs	r2, #65	; 0x41
 8001742:	2120      	movs	r1, #32
 8001744:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2242      	movs	r2, #66	; 0x42
 800174a:	2100      	movs	r1, #0
 800174c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2240      	movs	r2, #64	; 0x40
 8001752:	2100      	movs	r1, #0
 8001754:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e007      	b.n	800176a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	2220      	movs	r2, #32
 8001762:	4013      	ands	r3, r2
 8001764:	2b20      	cmp	r3, #32
 8001766:	d1c8      	bne.n	80016fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	0018      	movs	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	b004      	add	sp, #16
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b08b      	sub	sp, #44	; 0x2c
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001780:	2327      	movs	r3, #39	; 0x27
 8001782:	18fb      	adds	r3, r7, r3
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	2210      	movs	r2, #16
 800179c:	4013      	ands	r3, r2
 800179e:	d100      	bne.n	80017a2 <I2C_IsErrorOccurred+0x2e>
 80017a0:	e082      	b.n	80018a8 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2210      	movs	r2, #16
 80017a8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80017aa:	e060      	b.n	800186e <I2C_IsErrorOccurred+0xfa>
 80017ac:	2427      	movs	r4, #39	; 0x27
 80017ae:	193b      	adds	r3, r7, r4
 80017b0:	193a      	adds	r2, r7, r4
 80017b2:	7812      	ldrb	r2, [r2, #0]
 80017b4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	3301      	adds	r3, #1
 80017ba:	d058      	beq.n	800186e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80017bc:	f7ff f890 	bl	80008e0 <HAL_GetTick>
 80017c0:	0002      	movs	r2, r0
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d306      	bcc.n	80017da <I2C_IsErrorOccurred+0x66>
 80017cc:	193b      	adds	r3, r7, r4
 80017ce:	193a      	adds	r2, r7, r4
 80017d0:	7812      	ldrb	r2, [r2, #0]
 80017d2:	701a      	strb	r2, [r3, #0]
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d149      	bne.n	800186e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	01db      	lsls	r3, r3, #7
 80017e4:	4013      	ands	r3, r2
 80017e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80017e8:	2013      	movs	r0, #19
 80017ea:	183b      	adds	r3, r7, r0
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	2142      	movs	r1, #66	; 0x42
 80017f0:	5c52      	ldrb	r2, [r2, r1]
 80017f2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	699a      	ldr	r2, [r3, #24]
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	021b      	lsls	r3, r3, #8
 80017fe:	401a      	ands	r2, r3
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	021b      	lsls	r3, r3, #8
 8001804:	429a      	cmp	r2, r3
 8001806:	d126      	bne.n	8001856 <I2C_IsErrorOccurred+0xe2>
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	01db      	lsls	r3, r3, #7
 800180e:	429a      	cmp	r2, r3
 8001810:	d021      	beq.n	8001856 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001812:	183b      	adds	r3, r7, r0
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b20      	cmp	r3, #32
 8001818:	d01d      	beq.n	8001856 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2180      	movs	r1, #128	; 0x80
 8001826:	01c9      	lsls	r1, r1, #7
 8001828:	430a      	orrs	r2, r1
 800182a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800182c:	f7ff f858 	bl	80008e0 <HAL_GetTick>
 8001830:	0003      	movs	r3, r0
 8001832:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001834:	e00f      	b.n	8001856 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001836:	f7ff f853 	bl	80008e0 <HAL_GetTick>
 800183a:	0002      	movs	r2, r0
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b19      	cmp	r3, #25
 8001842:	d908      	bls.n	8001856 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001844:	6a3b      	ldr	r3, [r7, #32]
 8001846:	2220      	movs	r2, #32
 8001848:	4313      	orrs	r3, r2
 800184a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800184c:	2327      	movs	r3, #39	; 0x27
 800184e:	18fb      	adds	r3, r7, r3
 8001850:	2201      	movs	r2, #1
 8001852:	701a      	strb	r2, [r3, #0]

              break;
 8001854:	e00b      	b.n	800186e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	2220      	movs	r2, #32
 800185e:	4013      	ands	r3, r2
 8001860:	2127      	movs	r1, #39	; 0x27
 8001862:	187a      	adds	r2, r7, r1
 8001864:	1879      	adds	r1, r7, r1
 8001866:	7809      	ldrb	r1, [r1, #0]
 8001868:	7011      	strb	r1, [r2, #0]
 800186a:	2b20      	cmp	r3, #32
 800186c:	d1e3      	bne.n	8001836 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	2220      	movs	r2, #32
 8001876:	4013      	ands	r3, r2
 8001878:	2b20      	cmp	r3, #32
 800187a:	d004      	beq.n	8001886 <I2C_IsErrorOccurred+0x112>
 800187c:	2327      	movs	r3, #39	; 0x27
 800187e:	18fb      	adds	r3, r7, r3
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d092      	beq.n	80017ac <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001886:	2327      	movs	r3, #39	; 0x27
 8001888:	18fb      	adds	r3, r7, r3
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d103      	bne.n	8001898 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2220      	movs	r2, #32
 8001896:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001898:	6a3b      	ldr	r3, [r7, #32]
 800189a:	2204      	movs	r2, #4
 800189c:	4313      	orrs	r3, r2
 800189e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80018a0:	2327      	movs	r3, #39	; 0x27
 80018a2:	18fb      	adds	r3, r7, r3
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	2380      	movs	r3, #128	; 0x80
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4013      	ands	r3, r2
 80018b8:	d00c      	beq.n	80018d4 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80018ba:	6a3b      	ldr	r3, [r7, #32]
 80018bc:	2201      	movs	r2, #1
 80018be:	4313      	orrs	r3, r2
 80018c0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2280      	movs	r2, #128	; 0x80
 80018c8:	0052      	lsls	r2, r2, #1
 80018ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018cc:	2327      	movs	r3, #39	; 0x27
 80018ce:	18fb      	adds	r3, r7, r3
 80018d0:	2201      	movs	r2, #1
 80018d2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	4013      	ands	r3, r2
 80018dc:	d00c      	beq.n	80018f8 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80018de:	6a3b      	ldr	r3, [r7, #32]
 80018e0:	2208      	movs	r2, #8
 80018e2:	4313      	orrs	r3, r2
 80018e4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2280      	movs	r2, #128	; 0x80
 80018ec:	00d2      	lsls	r2, r2, #3
 80018ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018f0:	2327      	movs	r3, #39	; 0x27
 80018f2:	18fb      	adds	r3, r7, r3
 80018f4:	2201      	movs	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	2380      	movs	r3, #128	; 0x80
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4013      	ands	r3, r2
 8001900:	d00c      	beq.n	800191c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001902:	6a3b      	ldr	r3, [r7, #32]
 8001904:	2202      	movs	r2, #2
 8001906:	4313      	orrs	r3, r2
 8001908:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2280      	movs	r2, #128	; 0x80
 8001910:	0092      	lsls	r2, r2, #2
 8001912:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001914:	2327      	movs	r3, #39	; 0x27
 8001916:	18fb      	adds	r3, r7, r3
 8001918:	2201      	movs	r2, #1
 800191a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800191c:	2327      	movs	r3, #39	; 0x27
 800191e:	18fb      	adds	r3, r7, r3
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d01d      	beq.n	8001962 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	0018      	movs	r0, r3
 800192a:	f7ff fe29 	bl	8001580 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	490d      	ldr	r1, [pc, #52]	; (8001970 <I2C_IsErrorOccurred+0x1fc>)
 800193a:	400a      	ands	r2, r1
 800193c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	431a      	orrs	r2, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2241      	movs	r2, #65	; 0x41
 800194e:	2120      	movs	r1, #32
 8001950:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2242      	movs	r2, #66	; 0x42
 8001956:	2100      	movs	r1, #0
 8001958:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2240      	movs	r2, #64	; 0x40
 800195e:	2100      	movs	r1, #0
 8001960:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001962:	2327      	movs	r3, #39	; 0x27
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	781b      	ldrb	r3, [r3, #0]
}
 8001968:	0018      	movs	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	b00b      	add	sp, #44	; 0x2c
 800196e:	bd90      	pop	{r4, r7, pc}
 8001970:	fe00e800 	.word	0xfe00e800

08001974 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	0008      	movs	r0, r1
 800197e:	0011      	movs	r1, r2
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	240a      	movs	r4, #10
 8001984:	193b      	adds	r3, r7, r4
 8001986:	1c02      	adds	r2, r0, #0
 8001988:	801a      	strh	r2, [r3, #0]
 800198a:	2009      	movs	r0, #9
 800198c:	183b      	adds	r3, r7, r0
 800198e:	1c0a      	adds	r2, r1, #0
 8001990:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001992:	193b      	adds	r3, r7, r4
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	059b      	lsls	r3, r3, #22
 8001998:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800199a:	183b      	adds	r3, r7, r0
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	0419      	lsls	r1, r3, #16
 80019a0:	23ff      	movs	r3, #255	; 0xff
 80019a2:	041b      	lsls	r3, r3, #16
 80019a4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019a6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ae:	4313      	orrs	r3, r2
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	085b      	lsrs	r3, r3, #1
 80019b4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019be:	0d51      	lsrs	r1, r2, #21
 80019c0:	2280      	movs	r2, #128	; 0x80
 80019c2:	00d2      	lsls	r2, r2, #3
 80019c4:	400a      	ands	r2, r1
 80019c6:	4907      	ldr	r1, [pc, #28]	; (80019e4 <I2C_TransferConfig+0x70>)
 80019c8:	430a      	orrs	r2, r1
 80019ca:	43d2      	mvns	r2, r2
 80019cc:	401a      	ands	r2, r3
 80019ce:	0011      	movs	r1, r2
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	46bd      	mov	sp, r7
 80019de:	b007      	add	sp, #28
 80019e0:	bd90      	pop	{r4, r7, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	03ff63ff 	.word	0x03ff63ff

080019e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2241      	movs	r2, #65	; 0x41
 80019f6:	5c9b      	ldrb	r3, [r3, r2]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b20      	cmp	r3, #32
 80019fc:	d138      	bne.n	8001a70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2240      	movs	r2, #64	; 0x40
 8001a02:	5c9b      	ldrb	r3, [r3, r2]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d101      	bne.n	8001a0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e032      	b.n	8001a72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2240      	movs	r2, #64	; 0x40
 8001a10:	2101      	movs	r1, #1
 8001a12:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2241      	movs	r2, #65	; 0x41
 8001a18:	2124      	movs	r1, #36	; 0x24
 8001a1a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2101      	movs	r1, #1
 8001a28:	438a      	bics	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4911      	ldr	r1, [pc, #68]	; (8001a7c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001a38:	400a      	ands	r2, r1
 8001a3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6819      	ldr	r1, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2101      	movs	r1, #1
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2241      	movs	r2, #65	; 0x41
 8001a60:	2120      	movs	r1, #32
 8001a62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2240      	movs	r2, #64	; 0x40
 8001a68:	2100      	movs	r1, #0
 8001a6a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	e000      	b.n	8001a72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a70:	2302      	movs	r3, #2
  }
}
 8001a72:	0018      	movs	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b002      	add	sp, #8
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	ffffefff 	.word	0xffffefff

08001a80 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2241      	movs	r2, #65	; 0x41
 8001a8e:	5c9b      	ldrb	r3, [r3, r2]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b20      	cmp	r3, #32
 8001a94:	d139      	bne.n	8001b0a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2240      	movs	r2, #64	; 0x40
 8001a9a:	5c9b      	ldrb	r3, [r3, r2]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e033      	b.n	8001b0c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2240      	movs	r2, #64	; 0x40
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2241      	movs	r2, #65	; 0x41
 8001ab0:	2124      	movs	r1, #36	; 0x24
 8001ab2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2101      	movs	r1, #1
 8001ac0:	438a      	bics	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4a11      	ldr	r2, [pc, #68]	; (8001b14 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	021b      	lsls	r3, r3, #8
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2101      	movs	r1, #1
 8001af2:	430a      	orrs	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2241      	movs	r2, #65	; 0x41
 8001afa:	2120      	movs	r1, #32
 8001afc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2240      	movs	r2, #64	; 0x40
 8001b02:	2100      	movs	r1, #0
 8001b04:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e000      	b.n	8001b0c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b0a:	2302      	movs	r3, #2
  }
}
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b004      	add	sp, #16
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	fffff0ff 	.word	0xfffff0ff

08001b18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b088      	sub	sp, #32
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d102      	bne.n	8001b2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	f000 fb76 	bl	8002218 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2201      	movs	r2, #1
 8001b32:	4013      	ands	r3, r2
 8001b34:	d100      	bne.n	8001b38 <HAL_RCC_OscConfig+0x20>
 8001b36:	e08e      	b.n	8001c56 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b38:	4bc5      	ldr	r3, [pc, #788]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	220c      	movs	r2, #12
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d00e      	beq.n	8001b62 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b44:	4bc2      	ldr	r3, [pc, #776]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	220c      	movs	r2, #12
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d117      	bne.n	8001b80 <HAL_RCC_OscConfig+0x68>
 8001b50:	4bbf      	ldr	r3, [pc, #764]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	23c0      	movs	r3, #192	; 0xc0
 8001b56:	025b      	lsls	r3, r3, #9
 8001b58:	401a      	ands	r2, r3
 8001b5a:	2380      	movs	r3, #128	; 0x80
 8001b5c:	025b      	lsls	r3, r3, #9
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d10e      	bne.n	8001b80 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b62:	4bbb      	ldr	r3, [pc, #748]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	2380      	movs	r3, #128	; 0x80
 8001b68:	029b      	lsls	r3, r3, #10
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d100      	bne.n	8001b70 <HAL_RCC_OscConfig+0x58>
 8001b6e:	e071      	b.n	8001c54 <HAL_RCC_OscConfig+0x13c>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d000      	beq.n	8001b7a <HAL_RCC_OscConfig+0x62>
 8001b78:	e06c      	b.n	8001c54 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	f000 fb4c 	bl	8002218 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d107      	bne.n	8001b98 <HAL_RCC_OscConfig+0x80>
 8001b88:	4bb1      	ldr	r3, [pc, #708]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4bb0      	ldr	r3, [pc, #704]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001b8e:	2180      	movs	r1, #128	; 0x80
 8001b90:	0249      	lsls	r1, r1, #9
 8001b92:	430a      	orrs	r2, r1
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	e02f      	b.n	8001bf8 <HAL_RCC_OscConfig+0xe0>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d10c      	bne.n	8001bba <HAL_RCC_OscConfig+0xa2>
 8001ba0:	4bab      	ldr	r3, [pc, #684]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4baa      	ldr	r3, [pc, #680]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001ba6:	49ab      	ldr	r1, [pc, #684]	; (8001e54 <HAL_RCC_OscConfig+0x33c>)
 8001ba8:	400a      	ands	r2, r1
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	4ba8      	ldr	r3, [pc, #672]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4ba7      	ldr	r3, [pc, #668]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001bb2:	49a9      	ldr	r1, [pc, #676]	; (8001e58 <HAL_RCC_OscConfig+0x340>)
 8001bb4:	400a      	ands	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	e01e      	b.n	8001bf8 <HAL_RCC_OscConfig+0xe0>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b05      	cmp	r3, #5
 8001bc0:	d10e      	bne.n	8001be0 <HAL_RCC_OscConfig+0xc8>
 8001bc2:	4ba3      	ldr	r3, [pc, #652]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4ba2      	ldr	r3, [pc, #648]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001bc8:	2180      	movs	r1, #128	; 0x80
 8001bca:	02c9      	lsls	r1, r1, #11
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	4b9f      	ldr	r3, [pc, #636]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b9e      	ldr	r3, [pc, #632]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001bd6:	2180      	movs	r1, #128	; 0x80
 8001bd8:	0249      	lsls	r1, r1, #9
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	e00b      	b.n	8001bf8 <HAL_RCC_OscConfig+0xe0>
 8001be0:	4b9b      	ldr	r3, [pc, #620]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b9a      	ldr	r3, [pc, #616]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001be6:	499b      	ldr	r1, [pc, #620]	; (8001e54 <HAL_RCC_OscConfig+0x33c>)
 8001be8:	400a      	ands	r2, r1
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	4b98      	ldr	r3, [pc, #608]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b97      	ldr	r3, [pc, #604]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001bf2:	4999      	ldr	r1, [pc, #612]	; (8001e58 <HAL_RCC_OscConfig+0x340>)
 8001bf4:	400a      	ands	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d014      	beq.n	8001c2a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7fe fe6e 	bl	80008e0 <HAL_GetTick>
 8001c04:	0003      	movs	r3, r0
 8001c06:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c0a:	f7fe fe69 	bl	80008e0 <HAL_GetTick>
 8001c0e:	0002      	movs	r2, r0
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b64      	cmp	r3, #100	; 0x64
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e2fd      	b.n	8002218 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1c:	4b8c      	ldr	r3, [pc, #560]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	029b      	lsls	r3, r3, #10
 8001c24:	4013      	ands	r3, r2
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0xf2>
 8001c28:	e015      	b.n	8001c56 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2a:	f7fe fe59 	bl	80008e0 <HAL_GetTick>
 8001c2e:	0003      	movs	r3, r0
 8001c30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c34:	f7fe fe54 	bl	80008e0 <HAL_GetTick>
 8001c38:	0002      	movs	r2, r0
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b64      	cmp	r3, #100	; 0x64
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e2e8      	b.n	8002218 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c46:	4b82      	ldr	r3, [pc, #520]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	029b      	lsls	r3, r3, #10
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0x11c>
 8001c52:	e000      	b.n	8001c56 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c54:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d100      	bne.n	8001c62 <HAL_RCC_OscConfig+0x14a>
 8001c60:	e06c      	b.n	8001d3c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c62:	4b7b      	ldr	r3, [pc, #492]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	220c      	movs	r2, #12
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d00e      	beq.n	8001c8a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c6c:	4b78      	ldr	r3, [pc, #480]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	220c      	movs	r2, #12
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d11f      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x1a0>
 8001c78:	4b75      	ldr	r3, [pc, #468]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	23c0      	movs	r3, #192	; 0xc0
 8001c7e:	025b      	lsls	r3, r3, #9
 8001c80:	401a      	ands	r2, r3
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d116      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8a:	4b71      	ldr	r3, [pc, #452]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	4013      	ands	r3, r2
 8001c92:	d005      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x188>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e2bb      	b.n	8002218 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca0:	4b6b      	ldr	r3, [pc, #428]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	22f8      	movs	r2, #248	; 0xf8
 8001ca6:	4393      	bics	r3, r2
 8001ca8:	0019      	movs	r1, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	00da      	lsls	r2, r3, #3
 8001cb0:	4b67      	ldr	r3, [pc, #412]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb6:	e041      	b.n	8001d3c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d024      	beq.n	8001d0a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc0:	4b63      	ldr	r3, [pc, #396]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b62      	ldr	r3, [pc, #392]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7fe fe08 	bl	80008e0 <HAL_GetTick>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd6:	f7fe fe03 	bl	80008e0 <HAL_GetTick>
 8001cda:	0002      	movs	r2, r0
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e297      	b.n	8002218 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce8:	4b59      	ldr	r3, [pc, #356]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2202      	movs	r2, #2
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d0f1      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf2:	4b57      	ldr	r3, [pc, #348]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	22f8      	movs	r2, #248	; 0xf8
 8001cf8:	4393      	bics	r3, r2
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	00da      	lsls	r2, r3, #3
 8001d02:	4b53      	ldr	r3, [pc, #332]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001d04:	430a      	orrs	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	e018      	b.n	8001d3c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d0a:	4b51      	ldr	r3, [pc, #324]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	4b50      	ldr	r3, [pc, #320]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001d10:	2101      	movs	r1, #1
 8001d12:	438a      	bics	r2, r1
 8001d14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7fe fde3 	bl	80008e0 <HAL_GetTick>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d20:	f7fe fdde 	bl	80008e0 <HAL_GetTick>
 8001d24:	0002      	movs	r2, r0
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e272      	b.n	8002218 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d32:	4b47      	ldr	r3, [pc, #284]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2202      	movs	r2, #2
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d1f1      	bne.n	8001d20 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2208      	movs	r2, #8
 8001d42:	4013      	ands	r3, r2
 8001d44:	d036      	beq.n	8001db4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d019      	beq.n	8001d82 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d4e:	4b40      	ldr	r3, [pc, #256]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001d50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d52:	4b3f      	ldr	r3, [pc, #252]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001d54:	2101      	movs	r1, #1
 8001d56:	430a      	orrs	r2, r1
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5a:	f7fe fdc1 	bl	80008e0 <HAL_GetTick>
 8001d5e:	0003      	movs	r3, r0
 8001d60:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d64:	f7fe fdbc 	bl	80008e0 <HAL_GetTick>
 8001d68:	0002      	movs	r2, r0
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e250      	b.n	8002218 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d76:	4b36      	ldr	r3, [pc, #216]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d0f1      	beq.n	8001d64 <HAL_RCC_OscConfig+0x24c>
 8001d80:	e018      	b.n	8001db4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d82:	4b33      	ldr	r3, [pc, #204]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d86:	4b32      	ldr	r3, [pc, #200]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001d88:	2101      	movs	r1, #1
 8001d8a:	438a      	bics	r2, r1
 8001d8c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8e:	f7fe fda7 	bl	80008e0 <HAL_GetTick>
 8001d92:	0003      	movs	r3, r0
 8001d94:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d98:	f7fe fda2 	bl	80008e0 <HAL_GetTick>
 8001d9c:	0002      	movs	r2, r0
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e236      	b.n	8002218 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001daa:	4b29      	ldr	r3, [pc, #164]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	2202      	movs	r2, #2
 8001db0:	4013      	ands	r3, r2
 8001db2:	d1f1      	bne.n	8001d98 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2204      	movs	r2, #4
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d100      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x2a8>
 8001dbe:	e0b5      	b.n	8001f2c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc0:	201f      	movs	r0, #31
 8001dc2:	183b      	adds	r3, r7, r0
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc8:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001dca:	69da      	ldr	r2, [r3, #28]
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	055b      	lsls	r3, r3, #21
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d110      	bne.n	8001df6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001dd6:	69da      	ldr	r2, [r3, #28]
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001dda:	2180      	movs	r1, #128	; 0x80
 8001ddc:	0549      	lsls	r1, r1, #21
 8001dde:	430a      	orrs	r2, r1
 8001de0:	61da      	str	r2, [r3, #28]
 8001de2:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001de4:	69da      	ldr	r2, [r3, #28]
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	055b      	lsls	r3, r3, #21
 8001dea:	4013      	ands	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001df0:	183b      	adds	r3, r7, r0
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df6:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <HAL_RCC_OscConfig+0x344>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	2380      	movs	r3, #128	; 0x80
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d11a      	bne.n	8001e38 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e02:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <HAL_RCC_OscConfig+0x344>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <HAL_RCC_OscConfig+0x344>)
 8001e08:	2180      	movs	r1, #128	; 0x80
 8001e0a:	0049      	lsls	r1, r1, #1
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e10:	f7fe fd66 	bl	80008e0 <HAL_GetTick>
 8001e14:	0003      	movs	r3, r0
 8001e16:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1a:	f7fe fd61 	bl	80008e0 <HAL_GetTick>
 8001e1e:	0002      	movs	r2, r0
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b64      	cmp	r3, #100	; 0x64
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e1f5      	b.n	8002218 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_RCC_OscConfig+0x344>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	4013      	ands	r3, r2
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d10f      	bne.n	8001e60 <HAL_RCC_OscConfig+0x348>
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001e42:	6a1a      	ldr	r2, [r3, #32]
 8001e44:	4b02      	ldr	r3, [pc, #8]	; (8001e50 <HAL_RCC_OscConfig+0x338>)
 8001e46:	2101      	movs	r1, #1
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	621a      	str	r2, [r3, #32]
 8001e4c:	e036      	b.n	8001ebc <HAL_RCC_OscConfig+0x3a4>
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	40021000 	.word	0x40021000
 8001e54:	fffeffff 	.word	0xfffeffff
 8001e58:	fffbffff 	.word	0xfffbffff
 8001e5c:	40007000 	.word	0x40007000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10c      	bne.n	8001e82 <HAL_RCC_OscConfig+0x36a>
 8001e68:	4bca      	ldr	r3, [pc, #808]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001e6a:	6a1a      	ldr	r2, [r3, #32]
 8001e6c:	4bc9      	ldr	r3, [pc, #804]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001e6e:	2101      	movs	r1, #1
 8001e70:	438a      	bics	r2, r1
 8001e72:	621a      	str	r2, [r3, #32]
 8001e74:	4bc7      	ldr	r3, [pc, #796]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001e76:	6a1a      	ldr	r2, [r3, #32]
 8001e78:	4bc6      	ldr	r3, [pc, #792]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001e7a:	2104      	movs	r1, #4
 8001e7c:	438a      	bics	r2, r1
 8001e7e:	621a      	str	r2, [r3, #32]
 8001e80:	e01c      	b.n	8001ebc <HAL_RCC_OscConfig+0x3a4>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b05      	cmp	r3, #5
 8001e88:	d10c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x38c>
 8001e8a:	4bc2      	ldr	r3, [pc, #776]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001e8c:	6a1a      	ldr	r2, [r3, #32]
 8001e8e:	4bc1      	ldr	r3, [pc, #772]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001e90:	2104      	movs	r1, #4
 8001e92:	430a      	orrs	r2, r1
 8001e94:	621a      	str	r2, [r3, #32]
 8001e96:	4bbf      	ldr	r3, [pc, #764]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001e98:	6a1a      	ldr	r2, [r3, #32]
 8001e9a:	4bbe      	ldr	r3, [pc, #760]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	621a      	str	r2, [r3, #32]
 8001ea2:	e00b      	b.n	8001ebc <HAL_RCC_OscConfig+0x3a4>
 8001ea4:	4bbb      	ldr	r3, [pc, #748]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001ea6:	6a1a      	ldr	r2, [r3, #32]
 8001ea8:	4bba      	ldr	r3, [pc, #744]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001eaa:	2101      	movs	r1, #1
 8001eac:	438a      	bics	r2, r1
 8001eae:	621a      	str	r2, [r3, #32]
 8001eb0:	4bb8      	ldr	r3, [pc, #736]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001eb2:	6a1a      	ldr	r2, [r3, #32]
 8001eb4:	4bb7      	ldr	r3, [pc, #732]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001eb6:	2104      	movs	r1, #4
 8001eb8:	438a      	bics	r2, r1
 8001eba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d014      	beq.n	8001eee <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec4:	f7fe fd0c 	bl	80008e0 <HAL_GetTick>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ecc:	e009      	b.n	8001ee2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ece:	f7fe fd07 	bl	80008e0 <HAL_GetTick>
 8001ed2:	0002      	movs	r2, r0
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	4aaf      	ldr	r2, [pc, #700]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e19a      	b.n	8002218 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee2:	4bac      	ldr	r3, [pc, #688]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x3b6>
 8001eec:	e013      	b.n	8001f16 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eee:	f7fe fcf7 	bl	80008e0 <HAL_GetTick>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef6:	e009      	b.n	8001f0c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef8:	f7fe fcf2 	bl	80008e0 <HAL_GetTick>
 8001efc:	0002      	movs	r2, r0
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	4aa5      	ldr	r2, [pc, #660]	; (8002198 <HAL_RCC_OscConfig+0x680>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e185      	b.n	8002218 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f0c:	4ba1      	ldr	r3, [pc, #644]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	2202      	movs	r2, #2
 8001f12:	4013      	ands	r3, r2
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f16:	231f      	movs	r3, #31
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d105      	bne.n	8001f2c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f20:	4b9c      	ldr	r3, [pc, #624]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001f22:	69da      	ldr	r2, [r3, #28]
 8001f24:	4b9b      	ldr	r3, [pc, #620]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001f26:	499d      	ldr	r1, [pc, #628]	; (800219c <HAL_RCC_OscConfig+0x684>)
 8001f28:	400a      	ands	r2, r1
 8001f2a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2210      	movs	r2, #16
 8001f32:	4013      	ands	r3, r2
 8001f34:	d063      	beq.n	8001ffe <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d12a      	bne.n	8001f94 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f3e:	4b95      	ldr	r3, [pc, #596]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f42:	4b94      	ldr	r3, [pc, #592]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001f44:	2104      	movs	r1, #4
 8001f46:	430a      	orrs	r2, r1
 8001f48:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001f4a:	4b92      	ldr	r3, [pc, #584]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f4e:	4b91      	ldr	r3, [pc, #580]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001f50:	2101      	movs	r1, #1
 8001f52:	430a      	orrs	r2, r1
 8001f54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f56:	f7fe fcc3 	bl	80008e0 <HAL_GetTick>
 8001f5a:	0003      	movs	r3, r0
 8001f5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f60:	f7fe fcbe 	bl	80008e0 <HAL_GetTick>
 8001f64:	0002      	movs	r2, r0
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e152      	b.n	8002218 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f72:	4b88      	ldr	r3, [pc, #544]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f76:	2202      	movs	r2, #2
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d0f1      	beq.n	8001f60 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f7c:	4b85      	ldr	r3, [pc, #532]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f80:	22f8      	movs	r2, #248	; 0xf8
 8001f82:	4393      	bics	r3, r2
 8001f84:	0019      	movs	r1, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	00da      	lsls	r2, r3, #3
 8001f8c:	4b81      	ldr	r3, [pc, #516]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	635a      	str	r2, [r3, #52]	; 0x34
 8001f92:	e034      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	3305      	adds	r3, #5
 8001f9a:	d111      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001f9c:	4b7d      	ldr	r3, [pc, #500]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001f9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fa0:	4b7c      	ldr	r3, [pc, #496]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001fa2:	2104      	movs	r1, #4
 8001fa4:	438a      	bics	r2, r1
 8001fa6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001fa8:	4b7a      	ldr	r3, [pc, #488]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fac:	22f8      	movs	r2, #248	; 0xf8
 8001fae:	4393      	bics	r3, r2
 8001fb0:	0019      	movs	r1, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	00da      	lsls	r2, r3, #3
 8001fb8:	4b76      	ldr	r3, [pc, #472]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	635a      	str	r2, [r3, #52]	; 0x34
 8001fbe:	e01e      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001fc0:	4b74      	ldr	r3, [pc, #464]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001fc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fc4:	4b73      	ldr	r3, [pc, #460]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001fc6:	2104      	movs	r1, #4
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001fcc:	4b71      	ldr	r3, [pc, #452]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fd0:	4b70      	ldr	r3, [pc, #448]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	438a      	bics	r2, r1
 8001fd6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd8:	f7fe fc82 	bl	80008e0 <HAL_GetTick>
 8001fdc:	0003      	movs	r3, r0
 8001fde:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001fe2:	f7fe fc7d 	bl	80008e0 <HAL_GetTick>
 8001fe6:	0002      	movs	r2, r0
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e111      	b.n	8002218 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ff4:	4b67      	ldr	r3, [pc, #412]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8001ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d1f1      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2220      	movs	r2, #32
 8002004:	4013      	ands	r3, r2
 8002006:	d05c      	beq.n	80020c2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002008:	4b62      	ldr	r3, [pc, #392]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	220c      	movs	r2, #12
 800200e:	4013      	ands	r3, r2
 8002010:	2b0c      	cmp	r3, #12
 8002012:	d00e      	beq.n	8002032 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002014:	4b5f      	ldr	r3, [pc, #380]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	220c      	movs	r2, #12
 800201a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800201c:	2b08      	cmp	r3, #8
 800201e:	d114      	bne.n	800204a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002020:	4b5c      	ldr	r3, [pc, #368]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	23c0      	movs	r3, #192	; 0xc0
 8002026:	025b      	lsls	r3, r3, #9
 8002028:	401a      	ands	r2, r3
 800202a:	23c0      	movs	r3, #192	; 0xc0
 800202c:	025b      	lsls	r3, r3, #9
 800202e:	429a      	cmp	r2, r3
 8002030:	d10b      	bne.n	800204a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002032:	4b58      	ldr	r3, [pc, #352]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8002034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	029b      	lsls	r3, r3, #10
 800203a:	4013      	ands	r3, r2
 800203c:	d040      	beq.n	80020c0 <HAL_RCC_OscConfig+0x5a8>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d03c      	beq.n	80020c0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e0e6      	b.n	8002218 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d01b      	beq.n	800208a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002052:	4b50      	ldr	r3, [pc, #320]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8002054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002056:	4b4f      	ldr	r3, [pc, #316]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	0249      	lsls	r1, r1, #9
 800205c:	430a      	orrs	r2, r1
 800205e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002060:	f7fe fc3e 	bl	80008e0 <HAL_GetTick>
 8002064:	0003      	movs	r3, r0
 8002066:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800206a:	f7fe fc39 	bl	80008e0 <HAL_GetTick>
 800206e:	0002      	movs	r2, r0
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e0cd      	b.n	8002218 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800207c:	4b45      	ldr	r3, [pc, #276]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 800207e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002080:	2380      	movs	r3, #128	; 0x80
 8002082:	029b      	lsls	r3, r3, #10
 8002084:	4013      	ands	r3, r2
 8002086:	d0f0      	beq.n	800206a <HAL_RCC_OscConfig+0x552>
 8002088:	e01b      	b.n	80020c2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800208a:	4b42      	ldr	r3, [pc, #264]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 800208c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800208e:	4b41      	ldr	r3, [pc, #260]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8002090:	4943      	ldr	r1, [pc, #268]	; (80021a0 <HAL_RCC_OscConfig+0x688>)
 8002092:	400a      	ands	r2, r1
 8002094:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002096:	f7fe fc23 	bl	80008e0 <HAL_GetTick>
 800209a:	0003      	movs	r3, r0
 800209c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020a0:	f7fe fc1e 	bl	80008e0 <HAL_GetTick>
 80020a4:	0002      	movs	r2, r0
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e0b2      	b.n	8002218 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80020b2:	4b38      	ldr	r3, [pc, #224]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 80020b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020b6:	2380      	movs	r3, #128	; 0x80
 80020b8:	029b      	lsls	r3, r3, #10
 80020ba:	4013      	ands	r3, r2
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x588>
 80020be:	e000      	b.n	80020c2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80020c0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d100      	bne.n	80020cc <HAL_RCC_OscConfig+0x5b4>
 80020ca:	e0a4      	b.n	8002216 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020cc:	4b31      	ldr	r3, [pc, #196]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	220c      	movs	r2, #12
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d100      	bne.n	80020da <HAL_RCC_OscConfig+0x5c2>
 80020d8:	e078      	b.n	80021cc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d14c      	bne.n	800217c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e2:	4b2c      	ldr	r3, [pc, #176]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	4b2b      	ldr	r3, [pc, #172]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 80020e8:	492e      	ldr	r1, [pc, #184]	; (80021a4 <HAL_RCC_OscConfig+0x68c>)
 80020ea:	400a      	ands	r2, r1
 80020ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ee:	f7fe fbf7 	bl	80008e0 <HAL_GetTick>
 80020f2:	0003      	movs	r3, r0
 80020f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f8:	f7fe fbf2 	bl	80008e0 <HAL_GetTick>
 80020fc:	0002      	movs	r2, r0
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e086      	b.n	8002218 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800210a:	4b22      	ldr	r3, [pc, #136]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	2380      	movs	r3, #128	; 0x80
 8002110:	049b      	lsls	r3, r3, #18
 8002112:	4013      	ands	r3, r2
 8002114:	d1f0      	bne.n	80020f8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002116:	4b1f      	ldr	r3, [pc, #124]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8002118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211a:	220f      	movs	r2, #15
 800211c:	4393      	bics	r3, r2
 800211e:	0019      	movs	r1, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002124:	4b1b      	ldr	r3, [pc, #108]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8002126:	430a      	orrs	r2, r1
 8002128:	62da      	str	r2, [r3, #44]	; 0x2c
 800212a:	4b1a      	ldr	r3, [pc, #104]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	4a1e      	ldr	r2, [pc, #120]	; (80021a8 <HAL_RCC_OscConfig+0x690>)
 8002130:	4013      	ands	r3, r2
 8002132:	0019      	movs	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213c:	431a      	orrs	r2, r3
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8002140:	430a      	orrs	r2, r1
 8002142:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002144:	4b13      	ldr	r3, [pc, #76]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4b12      	ldr	r3, [pc, #72]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 800214a:	2180      	movs	r1, #128	; 0x80
 800214c:	0449      	lsls	r1, r1, #17
 800214e:	430a      	orrs	r2, r1
 8002150:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002152:	f7fe fbc5 	bl	80008e0 <HAL_GetTick>
 8002156:	0003      	movs	r3, r0
 8002158:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800215c:	f7fe fbc0 	bl	80008e0 <HAL_GetTick>
 8002160:	0002      	movs	r2, r0
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e054      	b.n	8002218 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800216e:	4b09      	ldr	r3, [pc, #36]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	2380      	movs	r3, #128	; 0x80
 8002174:	049b      	lsls	r3, r3, #18
 8002176:	4013      	ands	r3, r2
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0x644>
 800217a:	e04c      	b.n	8002216 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b04      	ldr	r3, [pc, #16]	; (8002194 <HAL_RCC_OscConfig+0x67c>)
 8002182:	4908      	ldr	r1, [pc, #32]	; (80021a4 <HAL_RCC_OscConfig+0x68c>)
 8002184:	400a      	ands	r2, r1
 8002186:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002188:	f7fe fbaa 	bl	80008e0 <HAL_GetTick>
 800218c:	0003      	movs	r3, r0
 800218e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002190:	e015      	b.n	80021be <HAL_RCC_OscConfig+0x6a6>
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	40021000 	.word	0x40021000
 8002198:	00001388 	.word	0x00001388
 800219c:	efffffff 	.word	0xefffffff
 80021a0:	fffeffff 	.word	0xfffeffff
 80021a4:	feffffff 	.word	0xfeffffff
 80021a8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ac:	f7fe fb98 	bl	80008e0 <HAL_GetTick>
 80021b0:	0002      	movs	r2, r0
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e02c      	b.n	8002218 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021be:	4b18      	ldr	r3, [pc, #96]	; (8002220 <HAL_RCC_OscConfig+0x708>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	049b      	lsls	r3, r3, #18
 80021c6:	4013      	ands	r3, r2
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0x694>
 80021ca:	e024      	b.n	8002216 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d101      	bne.n	80021d8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e01f      	b.n	8002218 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80021d8:	4b11      	ldr	r3, [pc, #68]	; (8002220 <HAL_RCC_OscConfig+0x708>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80021de:	4b10      	ldr	r3, [pc, #64]	; (8002220 <HAL_RCC_OscConfig+0x708>)
 80021e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	23c0      	movs	r3, #192	; 0xc0
 80021e8:	025b      	lsls	r3, r3, #9
 80021ea:	401a      	ands	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d10e      	bne.n	8002212 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	220f      	movs	r2, #15
 80021f8:	401a      	ands	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fe:	429a      	cmp	r2, r3
 8002200:	d107      	bne.n	8002212 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	23f0      	movs	r3, #240	; 0xf0
 8002206:	039b      	lsls	r3, r3, #14
 8002208:	401a      	ands	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800220e:	429a      	cmp	r2, r3
 8002210:	d001      	beq.n	8002216 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	0018      	movs	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	b008      	add	sp, #32
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40021000 	.word	0x40021000

08002224 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0bf      	b.n	80023b8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002238:	4b61      	ldr	r3, [pc, #388]	; (80023c0 <HAL_RCC_ClockConfig+0x19c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2201      	movs	r2, #1
 800223e:	4013      	ands	r3, r2
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d911      	bls.n	800226a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002246:	4b5e      	ldr	r3, [pc, #376]	; (80023c0 <HAL_RCC_ClockConfig+0x19c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2201      	movs	r2, #1
 800224c:	4393      	bics	r3, r2
 800224e:	0019      	movs	r1, r3
 8002250:	4b5b      	ldr	r3, [pc, #364]	; (80023c0 <HAL_RCC_ClockConfig+0x19c>)
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002258:	4b59      	ldr	r3, [pc, #356]	; (80023c0 <HAL_RCC_ClockConfig+0x19c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2201      	movs	r2, #1
 800225e:	4013      	ands	r3, r2
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d001      	beq.n	800226a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e0a6      	b.n	80023b8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2202      	movs	r2, #2
 8002270:	4013      	ands	r3, r2
 8002272:	d015      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2204      	movs	r2, #4
 800227a:	4013      	ands	r3, r2
 800227c:	d006      	beq.n	800228c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800227e:	4b51      	ldr	r3, [pc, #324]	; (80023c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	4b50      	ldr	r3, [pc, #320]	; (80023c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002284:	21e0      	movs	r1, #224	; 0xe0
 8002286:	00c9      	lsls	r1, r1, #3
 8002288:	430a      	orrs	r2, r1
 800228a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800228c:	4b4d      	ldr	r3, [pc, #308]	; (80023c4 <HAL_RCC_ClockConfig+0x1a0>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	22f0      	movs	r2, #240	; 0xf0
 8002292:	4393      	bics	r3, r2
 8002294:	0019      	movs	r1, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	4b4a      	ldr	r3, [pc, #296]	; (80023c4 <HAL_RCC_ClockConfig+0x1a0>)
 800229c:	430a      	orrs	r2, r1
 800229e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2201      	movs	r2, #1
 80022a6:	4013      	ands	r3, r2
 80022a8:	d04c      	beq.n	8002344 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d107      	bne.n	80022c2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	4b44      	ldr	r3, [pc, #272]	; (80023c4 <HAL_RCC_ClockConfig+0x1a0>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	029b      	lsls	r3, r3, #10
 80022ba:	4013      	ands	r3, r2
 80022bc:	d120      	bne.n	8002300 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e07a      	b.n	80023b8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d107      	bne.n	80022da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ca:	4b3e      	ldr	r3, [pc, #248]	; (80023c4 <HAL_RCC_ClockConfig+0x1a0>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	049b      	lsls	r3, r3, #18
 80022d2:	4013      	ands	r3, r2
 80022d4:	d114      	bne.n	8002300 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e06e      	b.n	80023b8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d107      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80022e2:	4b38      	ldr	r3, [pc, #224]	; (80023c4 <HAL_RCC_ClockConfig+0x1a0>)
 80022e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022e6:	2380      	movs	r3, #128	; 0x80
 80022e8:	029b      	lsls	r3, r3, #10
 80022ea:	4013      	ands	r3, r2
 80022ec:	d108      	bne.n	8002300 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e062      	b.n	80023b8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f2:	4b34      	ldr	r3, [pc, #208]	; (80023c4 <HAL_RCC_ClockConfig+0x1a0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2202      	movs	r2, #2
 80022f8:	4013      	ands	r3, r2
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e05b      	b.n	80023b8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002300:	4b30      	ldr	r3, [pc, #192]	; (80023c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2203      	movs	r2, #3
 8002306:	4393      	bics	r3, r2
 8002308:	0019      	movs	r1, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	4b2d      	ldr	r3, [pc, #180]	; (80023c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002310:	430a      	orrs	r2, r1
 8002312:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002314:	f7fe fae4 	bl	80008e0 <HAL_GetTick>
 8002318:	0003      	movs	r3, r0
 800231a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231c:	e009      	b.n	8002332 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800231e:	f7fe fadf 	bl	80008e0 <HAL_GetTick>
 8002322:	0002      	movs	r2, r0
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	4a27      	ldr	r2, [pc, #156]	; (80023c8 <HAL_RCC_ClockConfig+0x1a4>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e042      	b.n	80023b8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002332:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	220c      	movs	r2, #12
 8002338:	401a      	ands	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	429a      	cmp	r2, r3
 8002342:	d1ec      	bne.n	800231e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002344:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <HAL_RCC_ClockConfig+0x19c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2201      	movs	r2, #1
 800234a:	4013      	ands	r3, r2
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d211      	bcs.n	8002376 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002352:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <HAL_RCC_ClockConfig+0x19c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2201      	movs	r2, #1
 8002358:	4393      	bics	r3, r2
 800235a:	0019      	movs	r1, r3
 800235c:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <HAL_RCC_ClockConfig+0x19c>)
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002364:	4b16      	ldr	r3, [pc, #88]	; (80023c0 <HAL_RCC_ClockConfig+0x19c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2201      	movs	r2, #1
 800236a:	4013      	ands	r3, r2
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d001      	beq.n	8002376 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e020      	b.n	80023b8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2204      	movs	r2, #4
 800237c:	4013      	ands	r3, r2
 800237e:	d009      	beq.n	8002394 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002380:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	4a11      	ldr	r2, [pc, #68]	; (80023cc <HAL_RCC_ClockConfig+0x1a8>)
 8002386:	4013      	ands	r3, r2
 8002388:	0019      	movs	r1, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002390:	430a      	orrs	r2, r1
 8002392:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002394:	f000 f820 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 8002398:	0001      	movs	r1, r0
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <HAL_RCC_ClockConfig+0x1a0>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	091b      	lsrs	r3, r3, #4
 80023a0:	220f      	movs	r2, #15
 80023a2:	4013      	ands	r3, r2
 80023a4:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <HAL_RCC_ClockConfig+0x1ac>)
 80023a6:	5cd3      	ldrb	r3, [r2, r3]
 80023a8:	000a      	movs	r2, r1
 80023aa:	40da      	lsrs	r2, r3
 80023ac:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HAL_RCC_ClockConfig+0x1b0>)
 80023ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80023b0:	2000      	movs	r0, #0
 80023b2:	f7fe fa4f 	bl	8000854 <HAL_InitTick>
  
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	0018      	movs	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	b004      	add	sp, #16
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40022000 	.word	0x40022000
 80023c4:	40021000 	.word	0x40021000
 80023c8:	00001388 	.word	0x00001388
 80023cc:	fffff8ff 	.word	0xfffff8ff
 80023d0:	08003b28 	.word	0x08003b28
 80023d4:	20000000 	.word	0x20000000

080023d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	2300      	movs	r3, #0
 80023ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80023f2:	4b2d      	ldr	r3, [pc, #180]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	220c      	movs	r2, #12
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b0c      	cmp	r3, #12
 8002400:	d046      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0xb8>
 8002402:	d848      	bhi.n	8002496 <HAL_RCC_GetSysClockFreq+0xbe>
 8002404:	2b04      	cmp	r3, #4
 8002406:	d002      	beq.n	800240e <HAL_RCC_GetSysClockFreq+0x36>
 8002408:	2b08      	cmp	r3, #8
 800240a:	d003      	beq.n	8002414 <HAL_RCC_GetSysClockFreq+0x3c>
 800240c:	e043      	b.n	8002496 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800240e:	4b27      	ldr	r3, [pc, #156]	; (80024ac <HAL_RCC_GetSysClockFreq+0xd4>)
 8002410:	613b      	str	r3, [r7, #16]
      break;
 8002412:	e043      	b.n	800249c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	0c9b      	lsrs	r3, r3, #18
 8002418:	220f      	movs	r2, #15
 800241a:	4013      	ands	r3, r2
 800241c:	4a24      	ldr	r2, [pc, #144]	; (80024b0 <HAL_RCC_GetSysClockFreq+0xd8>)
 800241e:	5cd3      	ldrb	r3, [r2, r3]
 8002420:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002422:	4b21      	ldr	r3, [pc, #132]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002426:	220f      	movs	r2, #15
 8002428:	4013      	ands	r3, r2
 800242a:	4a22      	ldr	r2, [pc, #136]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xdc>)
 800242c:	5cd3      	ldrb	r3, [r2, r3]
 800242e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	23c0      	movs	r3, #192	; 0xc0
 8002434:	025b      	lsls	r3, r3, #9
 8002436:	401a      	ands	r2, r3
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	025b      	lsls	r3, r3, #9
 800243c:	429a      	cmp	r2, r3
 800243e:	d109      	bne.n	8002454 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	481a      	ldr	r0, [pc, #104]	; (80024ac <HAL_RCC_GetSysClockFreq+0xd4>)
 8002444:	f7fd fe72 	bl	800012c <__udivsi3>
 8002448:	0003      	movs	r3, r0
 800244a:	001a      	movs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4353      	muls	r3, r2
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	e01a      	b.n	800248a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	23c0      	movs	r3, #192	; 0xc0
 8002458:	025b      	lsls	r3, r3, #9
 800245a:	401a      	ands	r2, r3
 800245c:	23c0      	movs	r3, #192	; 0xc0
 800245e:	025b      	lsls	r3, r3, #9
 8002460:	429a      	cmp	r2, r3
 8002462:	d109      	bne.n	8002478 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002464:	68b9      	ldr	r1, [r7, #8]
 8002466:	4814      	ldr	r0, [pc, #80]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002468:	f7fd fe60 	bl	800012c <__udivsi3>
 800246c:	0003      	movs	r3, r0
 800246e:	001a      	movs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4353      	muls	r3, r2
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	e008      	b.n	800248a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	480c      	ldr	r0, [pc, #48]	; (80024ac <HAL_RCC_GetSysClockFreq+0xd4>)
 800247c:	f7fd fe56 	bl	800012c <__udivsi3>
 8002480:	0003      	movs	r3, r0
 8002482:	001a      	movs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4353      	muls	r3, r2
 8002488:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	613b      	str	r3, [r7, #16]
      break;
 800248e:	e005      	b.n	800249c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002490:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002492:	613b      	str	r3, [r7, #16]
      break;
 8002494:	e002      	b.n	800249c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002496:	4b05      	ldr	r3, [pc, #20]	; (80024ac <HAL_RCC_GetSysClockFreq+0xd4>)
 8002498:	613b      	str	r3, [r7, #16]
      break;
 800249a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800249c:	693b      	ldr	r3, [r7, #16]
}
 800249e:	0018      	movs	r0, r3
 80024a0:	46bd      	mov	sp, r7
 80024a2:	b006      	add	sp, #24
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	40021000 	.word	0x40021000
 80024ac:	007a1200 	.word	0x007a1200
 80024b0:	08003b40 	.word	0x08003b40
 80024b4:	08003b50 	.word	0x08003b50
 80024b8:	02dc6c00 	.word	0x02dc6c00

080024bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024c0:	4b02      	ldr	r3, [pc, #8]	; (80024cc <HAL_RCC_GetHCLKFreq+0x10>)
 80024c2:	681b      	ldr	r3, [r3, #0]
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	20000000 	.word	0x20000000

080024d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80024d4:	f7ff fff2 	bl	80024bc <HAL_RCC_GetHCLKFreq>
 80024d8:	0001      	movs	r1, r0
 80024da:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	0a1b      	lsrs	r3, r3, #8
 80024e0:	2207      	movs	r2, #7
 80024e2:	4013      	ands	r3, r2
 80024e4:	4a04      	ldr	r2, [pc, #16]	; (80024f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024e6:	5cd3      	ldrb	r3, [r2, r3]
 80024e8:	40d9      	lsrs	r1, r3
 80024ea:	000b      	movs	r3, r1
}    
 80024ec:	0018      	movs	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	46c0      	nop			; (mov r8, r8)
 80024f4:	40021000 	.word	0x40021000
 80024f8:	08003b38 	.word	0x08003b38

080024fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	2380      	movs	r3, #128	; 0x80
 8002512:	025b      	lsls	r3, r3, #9
 8002514:	4013      	ands	r3, r2
 8002516:	d100      	bne.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002518:	e08e      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800251a:	2017      	movs	r0, #23
 800251c:	183b      	adds	r3, r7, r0
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002522:	4b6e      	ldr	r3, [pc, #440]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002524:	69da      	ldr	r2, [r3, #28]
 8002526:	2380      	movs	r3, #128	; 0x80
 8002528:	055b      	lsls	r3, r3, #21
 800252a:	4013      	ands	r3, r2
 800252c:	d110      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	4b6b      	ldr	r3, [pc, #428]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002530:	69da      	ldr	r2, [r3, #28]
 8002532:	4b6a      	ldr	r3, [pc, #424]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002534:	2180      	movs	r1, #128	; 0x80
 8002536:	0549      	lsls	r1, r1, #21
 8002538:	430a      	orrs	r2, r1
 800253a:	61da      	str	r2, [r3, #28]
 800253c:	4b67      	ldr	r3, [pc, #412]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800253e:	69da      	ldr	r2, [r3, #28]
 8002540:	2380      	movs	r3, #128	; 0x80
 8002542:	055b      	lsls	r3, r3, #21
 8002544:	4013      	ands	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800254a:	183b      	adds	r3, r7, r0
 800254c:	2201      	movs	r2, #1
 800254e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002550:	4b63      	ldr	r3, [pc, #396]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	2380      	movs	r3, #128	; 0x80
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	4013      	ands	r3, r2
 800255a:	d11a      	bne.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800255c:	4b60      	ldr	r3, [pc, #384]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b5f      	ldr	r3, [pc, #380]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002562:	2180      	movs	r1, #128	; 0x80
 8002564:	0049      	lsls	r1, r1, #1
 8002566:	430a      	orrs	r2, r1
 8002568:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800256a:	f7fe f9b9 	bl	80008e0 <HAL_GetTick>
 800256e:	0003      	movs	r3, r0
 8002570:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002572:	e008      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002574:	f7fe f9b4 	bl	80008e0 <HAL_GetTick>
 8002578:	0002      	movs	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b64      	cmp	r3, #100	; 0x64
 8002580:	d901      	bls.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e0a6      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002586:	4b56      	ldr	r3, [pc, #344]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	2380      	movs	r3, #128	; 0x80
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	4013      	ands	r3, r2
 8002590:	d0f0      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002592:	4b52      	ldr	r3, [pc, #328]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002594:	6a1a      	ldr	r2, [r3, #32]
 8002596:	23c0      	movs	r3, #192	; 0xc0
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4013      	ands	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d034      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	23c0      	movs	r3, #192	; 0xc0
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4013      	ands	r3, r2
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d02c      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025b4:	4b49      	ldr	r3, [pc, #292]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	4a4a      	ldr	r2, [pc, #296]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025be:	4b47      	ldr	r3, [pc, #284]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025c0:	6a1a      	ldr	r2, [r3, #32]
 80025c2:	4b46      	ldr	r3, [pc, #280]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025c4:	2180      	movs	r1, #128	; 0x80
 80025c6:	0249      	lsls	r1, r1, #9
 80025c8:	430a      	orrs	r2, r1
 80025ca:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025cc:	4b43      	ldr	r3, [pc, #268]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025ce:	6a1a      	ldr	r2, [r3, #32]
 80025d0:	4b42      	ldr	r3, [pc, #264]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025d2:	4945      	ldr	r1, [pc, #276]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80025d4:	400a      	ands	r2, r1
 80025d6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025d8:	4b40      	ldr	r3, [pc, #256]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2201      	movs	r2, #1
 80025e2:	4013      	ands	r3, r2
 80025e4:	d013      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e6:	f7fe f97b 	bl	80008e0 <HAL_GetTick>
 80025ea:	0003      	movs	r3, r0
 80025ec:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ee:	e009      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f0:	f7fe f976 	bl	80008e0 <HAL_GetTick>
 80025f4:	0002      	movs	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	4a3c      	ldr	r2, [pc, #240]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d901      	bls.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e067      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002604:	4b35      	ldr	r3, [pc, #212]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	2202      	movs	r2, #2
 800260a:	4013      	ands	r3, r2
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800260e:	4b33      	ldr	r3, [pc, #204]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	4a34      	ldr	r2, [pc, #208]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002614:	4013      	ands	r3, r2
 8002616:	0019      	movs	r1, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	4b2f      	ldr	r3, [pc, #188]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800261e:	430a      	orrs	r2, r1
 8002620:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002622:	2317      	movs	r3, #23
 8002624:	18fb      	adds	r3, r7, r3
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d105      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800262c:	4b2b      	ldr	r3, [pc, #172]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800262e:	69da      	ldr	r2, [r3, #28]
 8002630:	4b2a      	ldr	r3, [pc, #168]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002632:	492f      	ldr	r1, [pc, #188]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002634:	400a      	ands	r2, r1
 8002636:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2201      	movs	r2, #1
 800263e:	4013      	ands	r3, r2
 8002640:	d009      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002642:	4b26      	ldr	r3, [pc, #152]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	2203      	movs	r2, #3
 8002648:	4393      	bics	r3, r2
 800264a:	0019      	movs	r1, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	4b22      	ldr	r3, [pc, #136]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002652:	430a      	orrs	r2, r1
 8002654:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2202      	movs	r2, #2
 800265c:	4013      	ands	r3, r2
 800265e:	d009      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002660:	4b1e      	ldr	r3, [pc, #120]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	4a23      	ldr	r2, [pc, #140]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002666:	4013      	ands	r3, r2
 8002668:	0019      	movs	r1, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002670:	430a      	orrs	r2, r1
 8002672:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2220      	movs	r2, #32
 800267a:	4013      	ands	r3, r2
 800267c:	d009      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800267e:	4b17      	ldr	r3, [pc, #92]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	2210      	movs	r2, #16
 8002684:	4393      	bics	r3, r2
 8002686:	0019      	movs	r1, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	4b13      	ldr	r3, [pc, #76]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800268e:	430a      	orrs	r2, r1
 8002690:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	2380      	movs	r3, #128	; 0x80
 8002698:	029b      	lsls	r3, r3, #10
 800269a:	4013      	ands	r3, r2
 800269c:	d009      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800269e:	4b0f      	ldr	r3, [pc, #60]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	2280      	movs	r2, #128	; 0x80
 80026a4:	4393      	bics	r3, r2
 80026a6:	0019      	movs	r1, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699a      	ldr	r2, [r3, #24]
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026ae:	430a      	orrs	r2, r1
 80026b0:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4013      	ands	r3, r2
 80026bc:	d009      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80026be:	4b07      	ldr	r3, [pc, #28]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	2240      	movs	r2, #64	; 0x40
 80026c4:	4393      	bics	r3, r2
 80026c6:	0019      	movs	r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	695a      	ldr	r2, [r3, #20]
 80026cc:	4b03      	ldr	r3, [pc, #12]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026ce:	430a      	orrs	r2, r1
 80026d0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	0018      	movs	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b006      	add	sp, #24
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40007000 	.word	0x40007000
 80026e4:	fffffcff 	.word	0xfffffcff
 80026e8:	fffeffff 	.word	0xfffeffff
 80026ec:	00001388 	.word	0x00001388
 80026f0:	efffffff 	.word	0xefffffff
 80026f4:	fffcffff 	.word	0xfffcffff

080026f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e044      	b.n	8002794 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800270e:	2b00      	cmp	r3, #0
 8002710:	d107      	bne.n	8002722 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2278      	movs	r2, #120	; 0x78
 8002716:	2100      	movs	r1, #0
 8002718:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	0018      	movs	r0, r3
 800271e:	f7fe f80f 	bl	8000740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2224      	movs	r2, #36	; 0x24
 8002726:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2101      	movs	r1, #1
 8002734:	438a      	bics	r2, r1
 8002736:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	0018      	movs	r0, r3
 800273c:	f000 f8d0 	bl	80028e0 <UART_SetConfig>
 8002740:	0003      	movs	r3, r0
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e024      	b.n	8002794 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	0018      	movs	r0, r3
 8002756:	f000 fa4b 	bl	8002bf0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	490d      	ldr	r1, [pc, #52]	; (800279c <HAL_UART_Init+0xa4>)
 8002766:	400a      	ands	r2, r1
 8002768:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	212a      	movs	r1, #42	; 0x2a
 8002776:	438a      	bics	r2, r1
 8002778:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2101      	movs	r1, #1
 8002786:	430a      	orrs	r2, r1
 8002788:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	0018      	movs	r0, r3
 800278e:	f000 fae3 	bl	8002d58 <UART_CheckIdleState>
 8002792:	0003      	movs	r3, r0
}
 8002794:	0018      	movs	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	b002      	add	sp, #8
 800279a:	bd80      	pop	{r7, pc}
 800279c:	ffffb7ff 	.word	0xffffb7ff

080027a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	; 0x28
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	1dbb      	adds	r3, r7, #6
 80027ae:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d000      	beq.n	80027ba <HAL_UART_Transmit+0x1a>
 80027b8:	e08d      	b.n	80028d6 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_UART_Transmit+0x28>
 80027c0:	1dbb      	adds	r3, r7, #6
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e085      	b.n	80028d8 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	015b      	lsls	r3, r3, #5
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d109      	bne.n	80027ec <HAL_UART_Transmit+0x4c>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d105      	bne.n	80027ec <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2201      	movs	r2, #1
 80027e4:	4013      	ands	r3, r2
 80027e6:	d001      	beq.n	80027ec <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e075      	b.n	80028d8 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2284      	movs	r2, #132	; 0x84
 80027f0:	2100      	movs	r1, #0
 80027f2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2221      	movs	r2, #33	; 0x21
 80027f8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027fa:	f7fe f871 	bl	80008e0 <HAL_GetTick>
 80027fe:	0003      	movs	r3, r0
 8002800:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1dba      	adds	r2, r7, #6
 8002806:	2150      	movs	r1, #80	; 0x50
 8002808:	8812      	ldrh	r2, [r2, #0]
 800280a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	1dba      	adds	r2, r7, #6
 8002810:	2152      	movs	r1, #82	; 0x52
 8002812:	8812      	ldrh	r2, [r2, #0]
 8002814:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	2380      	movs	r3, #128	; 0x80
 800281c:	015b      	lsls	r3, r3, #5
 800281e:	429a      	cmp	r2, r3
 8002820:	d108      	bne.n	8002834 <HAL_UART_Transmit+0x94>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d104      	bne.n	8002834 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	e003      	b.n	800283c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002838:	2300      	movs	r3, #0
 800283a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800283c:	e030      	b.n	80028a0 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	0013      	movs	r3, r2
 8002848:	2200      	movs	r2, #0
 800284a:	2180      	movs	r1, #128	; 0x80
 800284c:	f000 fb2c 	bl	8002ea8 <UART_WaitOnFlagUntilTimeout>
 8002850:	1e03      	subs	r3, r0, #0
 8002852:	d004      	beq.n	800285e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2220      	movs	r2, #32
 8002858:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e03c      	b.n	80028d8 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10b      	bne.n	800287c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	881a      	ldrh	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	05d2      	lsls	r2, r2, #23
 800286e:	0dd2      	lsrs	r2, r2, #23
 8002870:	b292      	uxth	r2, r2
 8002872:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	3302      	adds	r3, #2
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	e008      	b.n	800288e <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	781a      	ldrb	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	b292      	uxth	r2, r2
 8002886:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	3301      	adds	r3, #1
 800288c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2252      	movs	r2, #82	; 0x52
 8002892:	5a9b      	ldrh	r3, [r3, r2]
 8002894:	b29b      	uxth	r3, r3
 8002896:	3b01      	subs	r3, #1
 8002898:	b299      	uxth	r1, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2252      	movs	r2, #82	; 0x52
 800289e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2252      	movs	r2, #82	; 0x52
 80028a4:	5a9b      	ldrh	r3, [r3, r2]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1c8      	bne.n	800283e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	0013      	movs	r3, r2
 80028b6:	2200      	movs	r2, #0
 80028b8:	2140      	movs	r1, #64	; 0x40
 80028ba:	f000 faf5 	bl	8002ea8 <UART_WaitOnFlagUntilTimeout>
 80028be:	1e03      	subs	r3, r0, #0
 80028c0:	d004      	beq.n	80028cc <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2220      	movs	r2, #32
 80028c6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e005      	b.n	80028d8 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2220      	movs	r2, #32
 80028d0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	e000      	b.n	80028d8 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80028d6:	2302      	movs	r3, #2
  }
}
 80028d8:	0018      	movs	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	b008      	add	sp, #32
 80028de:	bd80      	pop	{r7, pc}

080028e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028e8:	231e      	movs	r3, #30
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	2200      	movs	r2, #0
 80028ee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	4313      	orrs	r3, r2
 8002906:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4aaf      	ldr	r2, [pc, #700]	; (8002bcc <UART_SetConfig+0x2ec>)
 8002910:	4013      	ands	r3, r2
 8002912:	0019      	movs	r1, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	430a      	orrs	r2, r1
 800291c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	4aaa      	ldr	r2, [pc, #680]	; (8002bd0 <UART_SetConfig+0x2f0>)
 8002926:	4013      	ands	r3, r2
 8002928:	0019      	movs	r1, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	4313      	orrs	r3, r2
 8002944:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	4aa1      	ldr	r2, [pc, #644]	; (8002bd4 <UART_SetConfig+0x2f4>)
 800294e:	4013      	ands	r3, r2
 8002950:	0019      	movs	r1, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	430a      	orrs	r2, r1
 800295a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a9d      	ldr	r2, [pc, #628]	; (8002bd8 <UART_SetConfig+0x2f8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d127      	bne.n	80029b6 <UART_SetConfig+0xd6>
 8002966:	4b9d      	ldr	r3, [pc, #628]	; (8002bdc <UART_SetConfig+0x2fc>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	2203      	movs	r2, #3
 800296c:	4013      	ands	r3, r2
 800296e:	2b03      	cmp	r3, #3
 8002970:	d00d      	beq.n	800298e <UART_SetConfig+0xae>
 8002972:	d81b      	bhi.n	80029ac <UART_SetConfig+0xcc>
 8002974:	2b02      	cmp	r3, #2
 8002976:	d014      	beq.n	80029a2 <UART_SetConfig+0xc2>
 8002978:	d818      	bhi.n	80029ac <UART_SetConfig+0xcc>
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <UART_SetConfig+0xa4>
 800297e:	2b01      	cmp	r3, #1
 8002980:	d00a      	beq.n	8002998 <UART_SetConfig+0xb8>
 8002982:	e013      	b.n	80029ac <UART_SetConfig+0xcc>
 8002984:	231f      	movs	r3, #31
 8002986:	18fb      	adds	r3, r7, r3
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]
 800298c:	e065      	b.n	8002a5a <UART_SetConfig+0x17a>
 800298e:	231f      	movs	r3, #31
 8002990:	18fb      	adds	r3, r7, r3
 8002992:	2202      	movs	r2, #2
 8002994:	701a      	strb	r2, [r3, #0]
 8002996:	e060      	b.n	8002a5a <UART_SetConfig+0x17a>
 8002998:	231f      	movs	r3, #31
 800299a:	18fb      	adds	r3, r7, r3
 800299c:	2204      	movs	r2, #4
 800299e:	701a      	strb	r2, [r3, #0]
 80029a0:	e05b      	b.n	8002a5a <UART_SetConfig+0x17a>
 80029a2:	231f      	movs	r3, #31
 80029a4:	18fb      	adds	r3, r7, r3
 80029a6:	2208      	movs	r2, #8
 80029a8:	701a      	strb	r2, [r3, #0]
 80029aa:	e056      	b.n	8002a5a <UART_SetConfig+0x17a>
 80029ac:	231f      	movs	r3, #31
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	2210      	movs	r2, #16
 80029b2:	701a      	strb	r2, [r3, #0]
 80029b4:	e051      	b.n	8002a5a <UART_SetConfig+0x17a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a89      	ldr	r2, [pc, #548]	; (8002be0 <UART_SetConfig+0x300>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d134      	bne.n	8002a2a <UART_SetConfig+0x14a>
 80029c0:	4b86      	ldr	r3, [pc, #536]	; (8002bdc <UART_SetConfig+0x2fc>)
 80029c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029c4:	23c0      	movs	r3, #192	; 0xc0
 80029c6:	029b      	lsls	r3, r3, #10
 80029c8:	4013      	ands	r3, r2
 80029ca:	22c0      	movs	r2, #192	; 0xc0
 80029cc:	0292      	lsls	r2, r2, #10
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d017      	beq.n	8002a02 <UART_SetConfig+0x122>
 80029d2:	22c0      	movs	r2, #192	; 0xc0
 80029d4:	0292      	lsls	r2, r2, #10
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d822      	bhi.n	8002a20 <UART_SetConfig+0x140>
 80029da:	2280      	movs	r2, #128	; 0x80
 80029dc:	0292      	lsls	r2, r2, #10
 80029de:	4293      	cmp	r3, r2
 80029e0:	d019      	beq.n	8002a16 <UART_SetConfig+0x136>
 80029e2:	2280      	movs	r2, #128	; 0x80
 80029e4:	0292      	lsls	r2, r2, #10
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d81a      	bhi.n	8002a20 <UART_SetConfig+0x140>
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d004      	beq.n	80029f8 <UART_SetConfig+0x118>
 80029ee:	2280      	movs	r2, #128	; 0x80
 80029f0:	0252      	lsls	r2, r2, #9
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d00a      	beq.n	8002a0c <UART_SetConfig+0x12c>
 80029f6:	e013      	b.n	8002a20 <UART_SetConfig+0x140>
 80029f8:	231f      	movs	r3, #31
 80029fa:	18fb      	adds	r3, r7, r3
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]
 8002a00:	e02b      	b.n	8002a5a <UART_SetConfig+0x17a>
 8002a02:	231f      	movs	r3, #31
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	2202      	movs	r2, #2
 8002a08:	701a      	strb	r2, [r3, #0]
 8002a0a:	e026      	b.n	8002a5a <UART_SetConfig+0x17a>
 8002a0c:	231f      	movs	r3, #31
 8002a0e:	18fb      	adds	r3, r7, r3
 8002a10:	2204      	movs	r2, #4
 8002a12:	701a      	strb	r2, [r3, #0]
 8002a14:	e021      	b.n	8002a5a <UART_SetConfig+0x17a>
 8002a16:	231f      	movs	r3, #31
 8002a18:	18fb      	adds	r3, r7, r3
 8002a1a:	2208      	movs	r2, #8
 8002a1c:	701a      	strb	r2, [r3, #0]
 8002a1e:	e01c      	b.n	8002a5a <UART_SetConfig+0x17a>
 8002a20:	231f      	movs	r3, #31
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	2210      	movs	r2, #16
 8002a26:	701a      	strb	r2, [r3, #0]
 8002a28:	e017      	b.n	8002a5a <UART_SetConfig+0x17a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a6d      	ldr	r2, [pc, #436]	; (8002be4 <UART_SetConfig+0x304>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d104      	bne.n	8002a3e <UART_SetConfig+0x15e>
 8002a34:	231f      	movs	r3, #31
 8002a36:	18fb      	adds	r3, r7, r3
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
 8002a3c:	e00d      	b.n	8002a5a <UART_SetConfig+0x17a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a69      	ldr	r2, [pc, #420]	; (8002be8 <UART_SetConfig+0x308>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d104      	bne.n	8002a52 <UART_SetConfig+0x172>
 8002a48:	231f      	movs	r3, #31
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]
 8002a50:	e003      	b.n	8002a5a <UART_SetConfig+0x17a>
 8002a52:	231f      	movs	r3, #31
 8002a54:	18fb      	adds	r3, r7, r3
 8002a56:	2210      	movs	r2, #16
 8002a58:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69da      	ldr	r2, [r3, #28]
 8002a5e:	2380      	movs	r3, #128	; 0x80
 8002a60:	021b      	lsls	r3, r3, #8
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d15c      	bne.n	8002b20 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8002a66:	231f      	movs	r3, #31
 8002a68:	18fb      	adds	r3, r7, r3
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d015      	beq.n	8002a9c <UART_SetConfig+0x1bc>
 8002a70:	dc18      	bgt.n	8002aa4 <UART_SetConfig+0x1c4>
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d00d      	beq.n	8002a92 <UART_SetConfig+0x1b2>
 8002a76:	dc15      	bgt.n	8002aa4 <UART_SetConfig+0x1c4>
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d002      	beq.n	8002a82 <UART_SetConfig+0x1a2>
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d005      	beq.n	8002a8c <UART_SetConfig+0x1ac>
 8002a80:	e010      	b.n	8002aa4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a82:	f7ff fd25 	bl	80024d0 <HAL_RCC_GetPCLK1Freq>
 8002a86:	0003      	movs	r3, r0
 8002a88:	61bb      	str	r3, [r7, #24]
        break;
 8002a8a:	e012      	b.n	8002ab2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a8c:	4b57      	ldr	r3, [pc, #348]	; (8002bec <UART_SetConfig+0x30c>)
 8002a8e:	61bb      	str	r3, [r7, #24]
        break;
 8002a90:	e00f      	b.n	8002ab2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a92:	f7ff fca1 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 8002a96:	0003      	movs	r3, r0
 8002a98:	61bb      	str	r3, [r7, #24]
        break;
 8002a9a:	e00a      	b.n	8002ab2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a9c:	2380      	movs	r3, #128	; 0x80
 8002a9e:	021b      	lsls	r3, r3, #8
 8002aa0:	61bb      	str	r3, [r7, #24]
        break;
 8002aa2:	e006      	b.n	8002ab2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002aa8:	231e      	movs	r3, #30
 8002aaa:	18fb      	adds	r3, r7, r3
 8002aac:	2201      	movs	r2, #1
 8002aae:	701a      	strb	r2, [r3, #0]
        break;
 8002ab0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d100      	bne.n	8002aba <UART_SetConfig+0x1da>
 8002ab8:	e07a      	b.n	8002bb0 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	005a      	lsls	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	085b      	lsrs	r3, r3, #1
 8002ac4:	18d2      	adds	r2, r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	0019      	movs	r1, r3
 8002acc:	0010      	movs	r0, r2
 8002ace:	f7fd fb2d 	bl	800012c <__udivsi3>
 8002ad2:	0003      	movs	r3, r0
 8002ad4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	2b0f      	cmp	r3, #15
 8002ada:	d91c      	bls.n	8002b16 <UART_SetConfig+0x236>
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	2380      	movs	r3, #128	; 0x80
 8002ae0:	025b      	lsls	r3, r3, #9
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d217      	bcs.n	8002b16 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	200e      	movs	r0, #14
 8002aec:	183b      	adds	r3, r7, r0
 8002aee:	210f      	movs	r1, #15
 8002af0:	438a      	bics	r2, r1
 8002af2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	085b      	lsrs	r3, r3, #1
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2207      	movs	r2, #7
 8002afc:	4013      	ands	r3, r2
 8002afe:	b299      	uxth	r1, r3
 8002b00:	183b      	adds	r3, r7, r0
 8002b02:	183a      	adds	r2, r7, r0
 8002b04:	8812      	ldrh	r2, [r2, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	183a      	adds	r2, r7, r0
 8002b10:	8812      	ldrh	r2, [r2, #0]
 8002b12:	60da      	str	r2, [r3, #12]
 8002b14:	e04c      	b.n	8002bb0 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8002b16:	231e      	movs	r3, #30
 8002b18:	18fb      	adds	r3, r7, r3
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	e047      	b.n	8002bb0 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b20:	231f      	movs	r3, #31
 8002b22:	18fb      	adds	r3, r7, r3
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d015      	beq.n	8002b56 <UART_SetConfig+0x276>
 8002b2a:	dc18      	bgt.n	8002b5e <UART_SetConfig+0x27e>
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d00d      	beq.n	8002b4c <UART_SetConfig+0x26c>
 8002b30:	dc15      	bgt.n	8002b5e <UART_SetConfig+0x27e>
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <UART_SetConfig+0x25c>
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d005      	beq.n	8002b46 <UART_SetConfig+0x266>
 8002b3a:	e010      	b.n	8002b5e <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b3c:	f7ff fcc8 	bl	80024d0 <HAL_RCC_GetPCLK1Freq>
 8002b40:	0003      	movs	r3, r0
 8002b42:	61bb      	str	r3, [r7, #24]
        break;
 8002b44:	e012      	b.n	8002b6c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b46:	4b29      	ldr	r3, [pc, #164]	; (8002bec <UART_SetConfig+0x30c>)
 8002b48:	61bb      	str	r3, [r7, #24]
        break;
 8002b4a:	e00f      	b.n	8002b6c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b4c:	f7ff fc44 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 8002b50:	0003      	movs	r3, r0
 8002b52:	61bb      	str	r3, [r7, #24]
        break;
 8002b54:	e00a      	b.n	8002b6c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	021b      	lsls	r3, r3, #8
 8002b5a:	61bb      	str	r3, [r7, #24]
        break;
 8002b5c:	e006      	b.n	8002b6c <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b62:	231e      	movs	r3, #30
 8002b64:	18fb      	adds	r3, r7, r3
 8002b66:	2201      	movs	r2, #1
 8002b68:	701a      	strb	r2, [r3, #0]
        break;
 8002b6a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d01e      	beq.n	8002bb0 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	085a      	lsrs	r2, r3, #1
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	18d2      	adds	r2, r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	0019      	movs	r1, r3
 8002b82:	0010      	movs	r0, r2
 8002b84:	f7fd fad2 	bl	800012c <__udivsi3>
 8002b88:	0003      	movs	r3, r0
 8002b8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	2b0f      	cmp	r3, #15
 8002b90:	d90a      	bls.n	8002ba8 <UART_SetConfig+0x2c8>
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	2380      	movs	r3, #128	; 0x80
 8002b96:	025b      	lsls	r3, r3, #9
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d205      	bcs.n	8002ba8 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	60da      	str	r2, [r3, #12]
 8002ba6:	e003      	b.n	8002bb0 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8002ba8:	231e      	movs	r3, #30
 8002baa:	18fb      	adds	r3, r7, r3
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002bbc:	231e      	movs	r3, #30
 8002bbe:	18fb      	adds	r3, r7, r3
 8002bc0:	781b      	ldrb	r3, [r3, #0]
}
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	b008      	add	sp, #32
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	efff69f3 	.word	0xefff69f3
 8002bd0:	ffffcfff 	.word	0xffffcfff
 8002bd4:	fffff4ff 	.word	0xfffff4ff
 8002bd8:	40013800 	.word	0x40013800
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40004400 	.word	0x40004400
 8002be4:	40004800 	.word	0x40004800
 8002be8:	40004c00 	.word	0x40004c00
 8002bec:	007a1200 	.word	0x007a1200

08002bf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d00b      	beq.n	8002c1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	4a4a      	ldr	r2, [pc, #296]	; (8002d34 <UART_AdvFeatureConfig+0x144>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	0019      	movs	r1, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	2202      	movs	r2, #2
 8002c20:	4013      	ands	r3, r2
 8002c22:	d00b      	beq.n	8002c3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	4a43      	ldr	r2, [pc, #268]	; (8002d38 <UART_AdvFeatureConfig+0x148>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	0019      	movs	r1, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	2204      	movs	r2, #4
 8002c42:	4013      	ands	r3, r2
 8002c44:	d00b      	beq.n	8002c5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	4a3b      	ldr	r2, [pc, #236]	; (8002d3c <UART_AdvFeatureConfig+0x14c>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	0019      	movs	r1, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	2208      	movs	r2, #8
 8002c64:	4013      	ands	r3, r2
 8002c66:	d00b      	beq.n	8002c80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	4a34      	ldr	r2, [pc, #208]	; (8002d40 <UART_AdvFeatureConfig+0x150>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	0019      	movs	r1, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	2210      	movs	r2, #16
 8002c86:	4013      	ands	r3, r2
 8002c88:	d00b      	beq.n	8002ca2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	4a2c      	ldr	r2, [pc, #176]	; (8002d44 <UART_AdvFeatureConfig+0x154>)
 8002c92:	4013      	ands	r3, r2
 8002c94:	0019      	movs	r1, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d00b      	beq.n	8002cc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	4a25      	ldr	r2, [pc, #148]	; (8002d48 <UART_AdvFeatureConfig+0x158>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	0019      	movs	r1, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	2240      	movs	r2, #64	; 0x40
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d01d      	beq.n	8002d0a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	4a1d      	ldr	r2, [pc, #116]	; (8002d4c <UART_AdvFeatureConfig+0x15c>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	0019      	movs	r1, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	035b      	lsls	r3, r3, #13
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d10b      	bne.n	8002d0a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	4a15      	ldr	r2, [pc, #84]	; (8002d50 <UART_AdvFeatureConfig+0x160>)
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	0019      	movs	r1, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	2280      	movs	r2, #128	; 0x80
 8002d10:	4013      	ands	r3, r2
 8002d12:	d00b      	beq.n	8002d2c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4a0e      	ldr	r2, [pc, #56]	; (8002d54 <UART_AdvFeatureConfig+0x164>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	0019      	movs	r1, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	605a      	str	r2, [r3, #4]
  }
}
 8002d2c:	46c0      	nop			; (mov r8, r8)
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b002      	add	sp, #8
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	fffdffff 	.word	0xfffdffff
 8002d38:	fffeffff 	.word	0xfffeffff
 8002d3c:	fffbffff 	.word	0xfffbffff
 8002d40:	ffff7fff 	.word	0xffff7fff
 8002d44:	ffffefff 	.word	0xffffefff
 8002d48:	ffffdfff 	.word	0xffffdfff
 8002d4c:	ffefffff 	.word	0xffefffff
 8002d50:	ff9fffff 	.word	0xff9fffff
 8002d54:	fff7ffff 	.word	0xfff7ffff

08002d58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b092      	sub	sp, #72	; 0x48
 8002d5c:	af02      	add	r7, sp, #8
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2284      	movs	r2, #132	; 0x84
 8002d64:	2100      	movs	r1, #0
 8002d66:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d68:	f7fd fdba 	bl	80008e0 <HAL_GetTick>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2208      	movs	r2, #8
 8002d78:	4013      	ands	r3, r2
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d12c      	bne.n	8002dd8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d80:	2280      	movs	r2, #128	; 0x80
 8002d82:	0391      	lsls	r1, r2, #14
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	4a46      	ldr	r2, [pc, #280]	; (8002ea0 <UART_CheckIdleState+0x148>)
 8002d88:	9200      	str	r2, [sp, #0]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f000 f88c 	bl	8002ea8 <UART_WaitOnFlagUntilTimeout>
 8002d90:	1e03      	subs	r3, r0, #0
 8002d92:	d021      	beq.n	8002dd8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d94:	f3ef 8310 	mrs	r3, PRIMASK
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002d9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d9e:	2301      	movs	r3, #1
 8002da0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da4:	f383 8810 	msr	PRIMASK, r3
}
 8002da8:	46c0      	nop			; (mov r8, r8)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2180      	movs	r1, #128	; 0x80
 8002db6:	438a      	bics	r2, r1
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc0:	f383 8810 	msr	PRIMASK, r3
}
 8002dc4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2278      	movs	r2, #120	; 0x78
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e05f      	b.n	8002e98 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2204      	movs	r2, #4
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d146      	bne.n	8002e74 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de8:	2280      	movs	r2, #128	; 0x80
 8002dea:	03d1      	lsls	r1, r2, #15
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	4a2c      	ldr	r2, [pc, #176]	; (8002ea0 <UART_CheckIdleState+0x148>)
 8002df0:	9200      	str	r2, [sp, #0]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f000 f858 	bl	8002ea8 <UART_WaitOnFlagUntilTimeout>
 8002df8:	1e03      	subs	r3, r0, #0
 8002dfa:	d03b      	beq.n	8002e74 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8002e00:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e02:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e04:	637b      	str	r3, [r7, #52]	; 0x34
 8002e06:	2301      	movs	r3, #1
 8002e08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	f383 8810 	msr	PRIMASK, r3
}
 8002e10:	46c0      	nop			; (mov r8, r8)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4921      	ldr	r1, [pc, #132]	; (8002ea4 <UART_CheckIdleState+0x14c>)
 8002e1e:	400a      	ands	r2, r1
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f383 8810 	msr	PRIMASK, r3
}
 8002e2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e32:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e34:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e36:	633b      	str	r3, [r7, #48]	; 0x30
 8002e38:	2301      	movs	r3, #1
 8002e3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f383 8810 	msr	PRIMASK, r3
}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2101      	movs	r1, #1
 8002e50:	438a      	bics	r2, r1
 8002e52:	609a      	str	r2, [r3, #8]
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	f383 8810 	msr	PRIMASK, r3
}
 8002e5e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2280      	movs	r2, #128	; 0x80
 8002e64:	2120      	movs	r1, #32
 8002e66:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2278      	movs	r2, #120	; 0x78
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e011      	b.n	8002e98 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2220      	movs	r2, #32
 8002e78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2280      	movs	r2, #128	; 0x80
 8002e7e:	2120      	movs	r1, #32
 8002e80:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2278      	movs	r2, #120	; 0x78
 8002e92:	2100      	movs	r1, #0
 8002e94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	0018      	movs	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	b010      	add	sp, #64	; 0x40
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	01ffffff 	.word	0x01ffffff
 8002ea4:	fffffedf 	.word	0xfffffedf

08002ea8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	1dfb      	adds	r3, r7, #7
 8002eb6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eb8:	e04b      	b.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	d048      	beq.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec0:	f7fd fd0e 	bl	80008e0 <HAL_GetTick>
 8002ec4:	0002      	movs	r2, r0
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d302      	bcc.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e04b      	b.n	8002f72 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2204      	movs	r2, #4
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d035      	beq.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	2208      	movs	r2, #8
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d111      	bne.n	8002f18 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2208      	movs	r2, #8
 8002efa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	0018      	movs	r0, r3
 8002f00:	f000 f83c 	bl	8002f7c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2284      	movs	r2, #132	; 0x84
 8002f08:	2108      	movs	r1, #8
 8002f0a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2278      	movs	r2, #120	; 0x78
 8002f10:	2100      	movs	r1, #0
 8002f12:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e02c      	b.n	8002f72 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	69da      	ldr	r2, [r3, #28]
 8002f1e:	2380      	movs	r3, #128	; 0x80
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	401a      	ands	r2, r3
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d112      	bne.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2280      	movs	r2, #128	; 0x80
 8002f32:	0112      	lsls	r2, r2, #4
 8002f34:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f000 f81f 	bl	8002f7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2284      	movs	r2, #132	; 0x84
 8002f42:	2120      	movs	r1, #32
 8002f44:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2278      	movs	r2, #120	; 0x78
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e00f      	b.n	8002f72 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	425a      	negs	r2, r3
 8002f62:	4153      	adcs	r3, r2
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	001a      	movs	r2, r3
 8002f68:	1dfb      	adds	r3, r7, #7
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d0a4      	beq.n	8002eba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	0018      	movs	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	b004      	add	sp, #16
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08e      	sub	sp, #56	; 0x38
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f84:	f3ef 8310 	mrs	r3, PRIMASK
 8002f88:	617b      	str	r3, [r7, #20]
  return(result);
 8002f8a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f8e:	2301      	movs	r3, #1
 8002f90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	f383 8810 	msr	PRIMASK, r3
}
 8002f98:	46c0      	nop			; (mov r8, r8)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4926      	ldr	r1, [pc, #152]	; (8003040 <UART_EndRxTransfer+0xc4>)
 8002fa6:	400a      	ands	r2, r1
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	f383 8810 	msr	PRIMASK, r3
}
 8002fb4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8002fba:	623b      	str	r3, [r7, #32]
  return(result);
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fbe:	633b      	str	r3, [r7, #48]	; 0x30
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	f383 8810 	msr	PRIMASK, r3
}
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	438a      	bics	r2, r1
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fde:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	f383 8810 	msr	PRIMASK, r3
}
 8002fe6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d118      	bne.n	8003022 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ff0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ff4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ff6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f383 8810 	msr	PRIMASK, r3
}
 8003004:	46c0      	nop			; (mov r8, r8)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2110      	movs	r1, #16
 8003012:	438a      	bics	r2, r1
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003018:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	f383 8810 	msr	PRIMASK, r3
}
 8003020:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2280      	movs	r2, #128	; 0x80
 8003026:	2120      	movs	r1, #32
 8003028:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	46bd      	mov	sp, r7
 800303a:	b00e      	add	sp, #56	; 0x38
 800303c:	bd80      	pop	{r7, pc}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	fffffedf 	.word	0xfffffedf

08003044 <writeReg>:
#include "./encoder.h"


uint8_t writeReg(uint8_t reg, const void* pBuf, size_t size){
 8003044:	b5b0      	push	{r4, r5, r7, lr}
 8003046:	b08a      	sub	sp, #40	; 0x28
 8003048:	af04      	add	r7, sp, #16
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
 800304e:	210f      	movs	r1, #15
 8003050:	187b      	adds	r3, r7, r1
 8003052:	1c02      	adds	r2, r0, #0
 8003054:	701a      	strb	r2, [r3, #0]

	 HAL_StatusTypeDef x = HAL_I2C_Mem_Write(&ENCODER_I2C_PORT, VISUAL_ROTARY_ENCODER_DEFAULT_I2C_ADDR, reg, 1, (uint8_t *)pBuf, size, 0xffffff);
 8003056:	187b      	adds	r3, r7, r1
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	b29a      	uxth	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	b29b      	uxth	r3, r3
 8003060:	2517      	movs	r5, #23
 8003062:	197c      	adds	r4, r7, r5
 8003064:	4808      	ldr	r0, [pc, #32]	; (8003088 <writeReg+0x44>)
 8003066:	4909      	ldr	r1, [pc, #36]	; (800308c <writeReg+0x48>)
 8003068:	9102      	str	r1, [sp, #8]
 800306a:	9301      	str	r3, [sp, #4]
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	2301      	movs	r3, #1
 8003072:	21a8      	movs	r1, #168	; 0xa8
 8003074:	f7fd ff5c 	bl	8000f30 <HAL_I2C_Mem_Write>
 8003078:	0003      	movs	r3, r0
 800307a:	7023      	strb	r3, [r4, #0]

	return (uint8_t)x;
 800307c:	197b      	adds	r3, r7, r5
 800307e:	781b      	ldrb	r3, [r3, #0]
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	b006      	add	sp, #24
 8003086:	bdb0      	pop	{r4, r5, r7, pc}
 8003088:	20000078 	.word	0x20000078
 800308c:	00ffffff 	.word	0x00ffffff

08003090 <readReg>:


size_t readReg(uint8_t reg, void* pBuf, size_t size){
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af04      	add	r7, sp, #16
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	210f      	movs	r1, #15
 800309c:	187b      	adds	r3, r7, r1
 800309e:	1c02      	adds	r2, r0, #0
 80030a0:	701a      	strb	r2, [r3, #0]


	HAL_I2C_Mem_Read(&ENCODER_I2C_PORT,VISUAL_ROTARY_ENCODER_DEFAULT_I2C_ADDR, reg, 1, (uint8_t*)pBuf, size, 0xffffff);
 80030a2:	187b      	adds	r3, r7, r1
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	4807      	ldr	r0, [pc, #28]	; (80030cc <readReg+0x3c>)
 80030ae:	4908      	ldr	r1, [pc, #32]	; (80030d0 <readReg+0x40>)
 80030b0:	9102      	str	r1, [sp, #8]
 80030b2:	9301      	str	r3, [sp, #4]
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	2301      	movs	r3, #1
 80030ba:	21a8      	movs	r1, #168	; 0xa8
 80030bc:	f7fe f866 	bl	800118c <HAL_I2C_Mem_Read>

}
 80030c0:	46c0      	nop			; (mov r8, r8)
 80030c2:	0018      	movs	r0, r3
 80030c4:	46bd      	mov	sp, r7
 80030c6:	b004      	add	sp, #16
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	20000078 	.word	0x20000078
 80030d0:	00ffffff 	.word	0x00ffffff

080030d4 <countVal>:

uint16_t countVal(void){
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0

	uint8_t CountValue[2] = {0};
 80030da:	1d3b      	adds	r3, r7, #4
 80030dc:	2200      	movs	r2, #0
 80030de:	801a      	strh	r2, [r3, #0]
	readReg(VISUAL_ROTARY_ENCODER_COUNT_MSB_REG, CountValue, sizeof(CountValue));
 80030e0:	1d3b      	adds	r3, r7, #4
 80030e2:	2202      	movs	r2, #2
 80030e4:	0019      	movs	r1, r3
 80030e6:	2008      	movs	r0, #8
 80030e8:	f7ff ffd2 	bl	8003090 <readReg>
	return (uint16_t)CountValue[0] << 8 | (uint16_t)CountValue[1];
 80030ec:	1d3b      	adds	r3, r7, #4
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	021b      	lsls	r3, r3, #8
 80030f2:	b21a      	sxth	r2, r3
 80030f4:	1d3b      	adds	r3, r7, #4
 80030f6:	785b      	ldrb	r3, [r3, #1]
 80030f8:	b21b      	sxth	r3, r3
 80030fa:	4313      	orrs	r3, r2
 80030fc:	b21b      	sxth	r3, r3
 80030fe:	b29b      	uxth	r3, r3
}
 8003100:	0018      	movs	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	b002      	add	sp, #8
 8003106:	bd80      	pop	{r7, pc}

08003108 <getButtonDetect>:
_Bool getButtonDetect(void){
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0

	_Bool ret = 0;
 800310e:	1dfb      	adds	r3, r7, #7
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]
	 uint8_t buttonStatus, clearStatus=0x00;
 8003114:	1d7b      	adds	r3, r7, #5
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]

	 readReg(VISUAL_ROTARY_ENCODER_KEY_STATUS_REG, &buttonStatus, sizeof(buttonStatus));
 800311a:	1dbb      	adds	r3, r7, #6
 800311c:	2201      	movs	r2, #1
 800311e:	0019      	movs	r1, r3
 8003120:	200a      	movs	r0, #10
 8003122:	f7ff ffb5 	bl	8003090 <readReg>

	 if( 0 != (buttonStatus & 0x01) ){
 8003126:	1dbb      	adds	r3, r7, #6
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	001a      	movs	r2, r3
 800312c:	2301      	movs	r3, #1
 800312e:	4013      	ands	r3, r2
 8003130:	d008      	beq.n	8003144 <getButtonDetect+0x3c>
	   writeReg(VISUAL_ROTARY_ENCODER_KEY_STATUS_REG, &clearStatus, sizeof(clearStatus));
 8003132:	1d7b      	adds	r3, r7, #5
 8003134:	2201      	movs	r2, #1
 8003136:	0019      	movs	r1, r3
 8003138:	200a      	movs	r0, #10
 800313a:	f7ff ff83 	bl	8003044 <writeReg>
	   ret = 1;
 800313e:	1dfb      	adds	r3, r7, #7
 8003140:	2201      	movs	r2, #1
 8003142:	701a      	strb	r2, [r3, #0]
	 }

	 return ret;
 8003144:	1dfb      	adds	r3, r7, #7
 8003146:	781b      	ldrb	r3, [r3, #0]


}
 8003148:	0018      	movs	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	b002      	add	sp, #8
 800314e:	bd80      	pop	{r7, pc}

08003150 <getGainCoefficient>:

uint8_t getGainCoefficient(void) {
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
  uint8_t RotateGain = 0;
 8003156:	1dfb      	adds	r3, r7, #7
 8003158:	2200      	movs	r2, #0
 800315a:	701a      	strb	r2, [r3, #0]
  readReg(VISUAL_ROTARY_ENCODER_GAIN_REG, &RotateGain, sizeof(RotateGain));
 800315c:	1dfb      	adds	r3, r7, #7
 800315e:	2201      	movs	r2, #1
 8003160:	0019      	movs	r1, r3
 8003162:	200b      	movs	r0, #11
 8003164:	f7ff ff94 	bl	8003090 <readReg>

  return RotateGain;
 8003168:	1dfb      	adds	r3, r7, #7
 800316a:	781b      	ldrb	r3, [r3, #0]
}
 800316c:	0018      	movs	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	b002      	add	sp, #8
 8003172:	bd80      	pop	{r7, pc}

08003174 <setGainCoefficient>:

void setGainCoefficient(uint8_t gainValue) {
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	0002      	movs	r2, r0
 800317c:	1dfb      	adds	r3, r7, #7
 800317e:	701a      	strb	r2, [r3, #0]
  if((0x01 <= gainValue) && (0x33 >= gainValue)){
 8003180:	1dfb      	adds	r3, r7, #7
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d009      	beq.n	800319c <setGainCoefficient+0x28>
 8003188:	1dfb      	adds	r3, r7, #7
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b33      	cmp	r3, #51	; 0x33
 800318e:	d805      	bhi.n	800319c <setGainCoefficient+0x28>
    writeReg(VISUAL_ROTARY_ENCODER_GAIN_REG, &gainValue, sizeof(gainValue));
 8003190:	1dfb      	adds	r3, r7, #7
 8003192:	2201      	movs	r2, #1
 8003194:	0019      	movs	r1, r3
 8003196:	200b      	movs	r0, #11
 8003198:	f7ff ff54 	bl	8003044 <writeReg>
  }
}
 800319c:	46c0      	nop			; (mov r8, r8)
 800319e:	46bd      	mov	sp, r7
 80031a0:	b002      	add	sp, #8
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <siprintf>:
 80031a4:	b40e      	push	{r1, r2, r3}
 80031a6:	b500      	push	{lr}
 80031a8:	490b      	ldr	r1, [pc, #44]	; (80031d8 <siprintf+0x34>)
 80031aa:	b09c      	sub	sp, #112	; 0x70
 80031ac:	ab1d      	add	r3, sp, #116	; 0x74
 80031ae:	9002      	str	r0, [sp, #8]
 80031b0:	9006      	str	r0, [sp, #24]
 80031b2:	9107      	str	r1, [sp, #28]
 80031b4:	9104      	str	r1, [sp, #16]
 80031b6:	4809      	ldr	r0, [pc, #36]	; (80031dc <siprintf+0x38>)
 80031b8:	4909      	ldr	r1, [pc, #36]	; (80031e0 <siprintf+0x3c>)
 80031ba:	cb04      	ldmia	r3!, {r2}
 80031bc:	9105      	str	r1, [sp, #20]
 80031be:	6800      	ldr	r0, [r0, #0]
 80031c0:	a902      	add	r1, sp, #8
 80031c2:	9301      	str	r3, [sp, #4]
 80031c4:	f000 f9a2 	bl	800350c <_svfiprintf_r>
 80031c8:	2200      	movs	r2, #0
 80031ca:	9b02      	ldr	r3, [sp, #8]
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	b01c      	add	sp, #112	; 0x70
 80031d0:	bc08      	pop	{r3}
 80031d2:	b003      	add	sp, #12
 80031d4:	4718      	bx	r3
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	7fffffff 	.word	0x7fffffff
 80031dc:	20000058 	.word	0x20000058
 80031e0:	ffff0208 	.word	0xffff0208

080031e4 <memset>:
 80031e4:	0003      	movs	r3, r0
 80031e6:	1882      	adds	r2, r0, r2
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d100      	bne.n	80031ee <memset+0xa>
 80031ec:	4770      	bx	lr
 80031ee:	7019      	strb	r1, [r3, #0]
 80031f0:	3301      	adds	r3, #1
 80031f2:	e7f9      	b.n	80031e8 <memset+0x4>

080031f4 <__errno>:
 80031f4:	4b01      	ldr	r3, [pc, #4]	; (80031fc <__errno+0x8>)
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	4770      	bx	lr
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	20000058 	.word	0x20000058

08003200 <__libc_init_array>:
 8003200:	b570      	push	{r4, r5, r6, lr}
 8003202:	2600      	movs	r6, #0
 8003204:	4c0c      	ldr	r4, [pc, #48]	; (8003238 <__libc_init_array+0x38>)
 8003206:	4d0d      	ldr	r5, [pc, #52]	; (800323c <__libc_init_array+0x3c>)
 8003208:	1b64      	subs	r4, r4, r5
 800320a:	10a4      	asrs	r4, r4, #2
 800320c:	42a6      	cmp	r6, r4
 800320e:	d109      	bne.n	8003224 <__libc_init_array+0x24>
 8003210:	2600      	movs	r6, #0
 8003212:	f000 fc6d 	bl	8003af0 <_init>
 8003216:	4c0a      	ldr	r4, [pc, #40]	; (8003240 <__libc_init_array+0x40>)
 8003218:	4d0a      	ldr	r5, [pc, #40]	; (8003244 <__libc_init_array+0x44>)
 800321a:	1b64      	subs	r4, r4, r5
 800321c:	10a4      	asrs	r4, r4, #2
 800321e:	42a6      	cmp	r6, r4
 8003220:	d105      	bne.n	800322e <__libc_init_array+0x2e>
 8003222:	bd70      	pop	{r4, r5, r6, pc}
 8003224:	00b3      	lsls	r3, r6, #2
 8003226:	58eb      	ldr	r3, [r5, r3]
 8003228:	4798      	blx	r3
 800322a:	3601      	adds	r6, #1
 800322c:	e7ee      	b.n	800320c <__libc_init_array+0xc>
 800322e:	00b3      	lsls	r3, r6, #2
 8003230:	58eb      	ldr	r3, [r5, r3]
 8003232:	4798      	blx	r3
 8003234:	3601      	adds	r6, #1
 8003236:	e7f2      	b.n	800321e <__libc_init_array+0x1e>
 8003238:	08003b94 	.word	0x08003b94
 800323c:	08003b94 	.word	0x08003b94
 8003240:	08003b98 	.word	0x08003b98
 8003244:	08003b94 	.word	0x08003b94

08003248 <__retarget_lock_acquire_recursive>:
 8003248:	4770      	bx	lr

0800324a <__retarget_lock_release_recursive>:
 800324a:	4770      	bx	lr

0800324c <_free_r>:
 800324c:	b570      	push	{r4, r5, r6, lr}
 800324e:	0005      	movs	r5, r0
 8003250:	2900      	cmp	r1, #0
 8003252:	d010      	beq.n	8003276 <_free_r+0x2a>
 8003254:	1f0c      	subs	r4, r1, #4
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	da00      	bge.n	800325e <_free_r+0x12>
 800325c:	18e4      	adds	r4, r4, r3
 800325e:	0028      	movs	r0, r5
 8003260:	f000 f8e2 	bl	8003428 <__malloc_lock>
 8003264:	4a1d      	ldr	r2, [pc, #116]	; (80032dc <_free_r+0x90>)
 8003266:	6813      	ldr	r3, [r2, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d105      	bne.n	8003278 <_free_r+0x2c>
 800326c:	6063      	str	r3, [r4, #4]
 800326e:	6014      	str	r4, [r2, #0]
 8003270:	0028      	movs	r0, r5
 8003272:	f000 f8e1 	bl	8003438 <__malloc_unlock>
 8003276:	bd70      	pop	{r4, r5, r6, pc}
 8003278:	42a3      	cmp	r3, r4
 800327a:	d908      	bls.n	800328e <_free_r+0x42>
 800327c:	6820      	ldr	r0, [r4, #0]
 800327e:	1821      	adds	r1, r4, r0
 8003280:	428b      	cmp	r3, r1
 8003282:	d1f3      	bne.n	800326c <_free_r+0x20>
 8003284:	6819      	ldr	r1, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	1809      	adds	r1, r1, r0
 800328a:	6021      	str	r1, [r4, #0]
 800328c:	e7ee      	b.n	800326c <_free_r+0x20>
 800328e:	001a      	movs	r2, r3
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <_free_r+0x4e>
 8003296:	42a3      	cmp	r3, r4
 8003298:	d9f9      	bls.n	800328e <_free_r+0x42>
 800329a:	6811      	ldr	r1, [r2, #0]
 800329c:	1850      	adds	r0, r2, r1
 800329e:	42a0      	cmp	r0, r4
 80032a0:	d10b      	bne.n	80032ba <_free_r+0x6e>
 80032a2:	6820      	ldr	r0, [r4, #0]
 80032a4:	1809      	adds	r1, r1, r0
 80032a6:	1850      	adds	r0, r2, r1
 80032a8:	6011      	str	r1, [r2, #0]
 80032aa:	4283      	cmp	r3, r0
 80032ac:	d1e0      	bne.n	8003270 <_free_r+0x24>
 80032ae:	6818      	ldr	r0, [r3, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	1841      	adds	r1, r0, r1
 80032b4:	6011      	str	r1, [r2, #0]
 80032b6:	6053      	str	r3, [r2, #4]
 80032b8:	e7da      	b.n	8003270 <_free_r+0x24>
 80032ba:	42a0      	cmp	r0, r4
 80032bc:	d902      	bls.n	80032c4 <_free_r+0x78>
 80032be:	230c      	movs	r3, #12
 80032c0:	602b      	str	r3, [r5, #0]
 80032c2:	e7d5      	b.n	8003270 <_free_r+0x24>
 80032c4:	6820      	ldr	r0, [r4, #0]
 80032c6:	1821      	adds	r1, r4, r0
 80032c8:	428b      	cmp	r3, r1
 80032ca:	d103      	bne.n	80032d4 <_free_r+0x88>
 80032cc:	6819      	ldr	r1, [r3, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	1809      	adds	r1, r1, r0
 80032d2:	6021      	str	r1, [r4, #0]
 80032d4:	6063      	str	r3, [r4, #4]
 80032d6:	6054      	str	r4, [r2, #4]
 80032d8:	e7ca      	b.n	8003270 <_free_r+0x24>
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	20000300 	.word	0x20000300

080032e0 <sbrk_aligned>:
 80032e0:	b570      	push	{r4, r5, r6, lr}
 80032e2:	4e0f      	ldr	r6, [pc, #60]	; (8003320 <sbrk_aligned+0x40>)
 80032e4:	000d      	movs	r5, r1
 80032e6:	6831      	ldr	r1, [r6, #0]
 80032e8:	0004      	movs	r4, r0
 80032ea:	2900      	cmp	r1, #0
 80032ec:	d102      	bne.n	80032f4 <sbrk_aligned+0x14>
 80032ee:	f000 fba1 	bl	8003a34 <_sbrk_r>
 80032f2:	6030      	str	r0, [r6, #0]
 80032f4:	0029      	movs	r1, r5
 80032f6:	0020      	movs	r0, r4
 80032f8:	f000 fb9c 	bl	8003a34 <_sbrk_r>
 80032fc:	1c43      	adds	r3, r0, #1
 80032fe:	d00a      	beq.n	8003316 <sbrk_aligned+0x36>
 8003300:	2303      	movs	r3, #3
 8003302:	1cc5      	adds	r5, r0, #3
 8003304:	439d      	bics	r5, r3
 8003306:	42a8      	cmp	r0, r5
 8003308:	d007      	beq.n	800331a <sbrk_aligned+0x3a>
 800330a:	1a29      	subs	r1, r5, r0
 800330c:	0020      	movs	r0, r4
 800330e:	f000 fb91 	bl	8003a34 <_sbrk_r>
 8003312:	3001      	adds	r0, #1
 8003314:	d101      	bne.n	800331a <sbrk_aligned+0x3a>
 8003316:	2501      	movs	r5, #1
 8003318:	426d      	negs	r5, r5
 800331a:	0028      	movs	r0, r5
 800331c:	bd70      	pop	{r4, r5, r6, pc}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	20000304 	.word	0x20000304

08003324 <_malloc_r>:
 8003324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003326:	2203      	movs	r2, #3
 8003328:	1ccb      	adds	r3, r1, #3
 800332a:	4393      	bics	r3, r2
 800332c:	3308      	adds	r3, #8
 800332e:	0006      	movs	r6, r0
 8003330:	001f      	movs	r7, r3
 8003332:	2b0c      	cmp	r3, #12
 8003334:	d238      	bcs.n	80033a8 <_malloc_r+0x84>
 8003336:	270c      	movs	r7, #12
 8003338:	42b9      	cmp	r1, r7
 800333a:	d837      	bhi.n	80033ac <_malloc_r+0x88>
 800333c:	0030      	movs	r0, r6
 800333e:	f000 f873 	bl	8003428 <__malloc_lock>
 8003342:	4b38      	ldr	r3, [pc, #224]	; (8003424 <_malloc_r+0x100>)
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	001c      	movs	r4, r3
 800334a:	2c00      	cmp	r4, #0
 800334c:	d133      	bne.n	80033b6 <_malloc_r+0x92>
 800334e:	0039      	movs	r1, r7
 8003350:	0030      	movs	r0, r6
 8003352:	f7ff ffc5 	bl	80032e0 <sbrk_aligned>
 8003356:	0004      	movs	r4, r0
 8003358:	1c43      	adds	r3, r0, #1
 800335a:	d15e      	bne.n	800341a <_malloc_r+0xf6>
 800335c:	9b00      	ldr	r3, [sp, #0]
 800335e:	681c      	ldr	r4, [r3, #0]
 8003360:	0025      	movs	r5, r4
 8003362:	2d00      	cmp	r5, #0
 8003364:	d14e      	bne.n	8003404 <_malloc_r+0xe0>
 8003366:	2c00      	cmp	r4, #0
 8003368:	d051      	beq.n	800340e <_malloc_r+0xea>
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	0029      	movs	r1, r5
 800336e:	18e3      	adds	r3, r4, r3
 8003370:	0030      	movs	r0, r6
 8003372:	9301      	str	r3, [sp, #4]
 8003374:	f000 fb5e 	bl	8003a34 <_sbrk_r>
 8003378:	9b01      	ldr	r3, [sp, #4]
 800337a:	4283      	cmp	r3, r0
 800337c:	d147      	bne.n	800340e <_malloc_r+0xea>
 800337e:	6823      	ldr	r3, [r4, #0]
 8003380:	0030      	movs	r0, r6
 8003382:	1aff      	subs	r7, r7, r3
 8003384:	0039      	movs	r1, r7
 8003386:	f7ff ffab 	bl	80032e0 <sbrk_aligned>
 800338a:	3001      	adds	r0, #1
 800338c:	d03f      	beq.n	800340e <_malloc_r+0xea>
 800338e:	6823      	ldr	r3, [r4, #0]
 8003390:	19db      	adds	r3, r3, r7
 8003392:	6023      	str	r3, [r4, #0]
 8003394:	9b00      	ldr	r3, [sp, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d040      	beq.n	800341e <_malloc_r+0xfa>
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	42a2      	cmp	r2, r4
 80033a0:	d133      	bne.n	800340a <_malloc_r+0xe6>
 80033a2:	2200      	movs	r2, #0
 80033a4:	605a      	str	r2, [r3, #4]
 80033a6:	e014      	b.n	80033d2 <_malloc_r+0xae>
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	dac5      	bge.n	8003338 <_malloc_r+0x14>
 80033ac:	230c      	movs	r3, #12
 80033ae:	2500      	movs	r5, #0
 80033b0:	6033      	str	r3, [r6, #0]
 80033b2:	0028      	movs	r0, r5
 80033b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80033b6:	6821      	ldr	r1, [r4, #0]
 80033b8:	1bc9      	subs	r1, r1, r7
 80033ba:	d420      	bmi.n	80033fe <_malloc_r+0xda>
 80033bc:	290b      	cmp	r1, #11
 80033be:	d918      	bls.n	80033f2 <_malloc_r+0xce>
 80033c0:	19e2      	adds	r2, r4, r7
 80033c2:	6027      	str	r7, [r4, #0]
 80033c4:	42a3      	cmp	r3, r4
 80033c6:	d112      	bne.n	80033ee <_malloc_r+0xca>
 80033c8:	9b00      	ldr	r3, [sp, #0]
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	6863      	ldr	r3, [r4, #4]
 80033ce:	6011      	str	r1, [r2, #0]
 80033d0:	6053      	str	r3, [r2, #4]
 80033d2:	0030      	movs	r0, r6
 80033d4:	0025      	movs	r5, r4
 80033d6:	f000 f82f 	bl	8003438 <__malloc_unlock>
 80033da:	2207      	movs	r2, #7
 80033dc:	350b      	adds	r5, #11
 80033de:	1d23      	adds	r3, r4, #4
 80033e0:	4395      	bics	r5, r2
 80033e2:	1aea      	subs	r2, r5, r3
 80033e4:	429d      	cmp	r5, r3
 80033e6:	d0e4      	beq.n	80033b2 <_malloc_r+0x8e>
 80033e8:	1b5b      	subs	r3, r3, r5
 80033ea:	50a3      	str	r3, [r4, r2]
 80033ec:	e7e1      	b.n	80033b2 <_malloc_r+0x8e>
 80033ee:	605a      	str	r2, [r3, #4]
 80033f0:	e7ec      	b.n	80033cc <_malloc_r+0xa8>
 80033f2:	6862      	ldr	r2, [r4, #4]
 80033f4:	42a3      	cmp	r3, r4
 80033f6:	d1d5      	bne.n	80033a4 <_malloc_r+0x80>
 80033f8:	9b00      	ldr	r3, [sp, #0]
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	e7e9      	b.n	80033d2 <_malloc_r+0xae>
 80033fe:	0023      	movs	r3, r4
 8003400:	6864      	ldr	r4, [r4, #4]
 8003402:	e7a2      	b.n	800334a <_malloc_r+0x26>
 8003404:	002c      	movs	r4, r5
 8003406:	686d      	ldr	r5, [r5, #4]
 8003408:	e7ab      	b.n	8003362 <_malloc_r+0x3e>
 800340a:	0013      	movs	r3, r2
 800340c:	e7c4      	b.n	8003398 <_malloc_r+0x74>
 800340e:	230c      	movs	r3, #12
 8003410:	0030      	movs	r0, r6
 8003412:	6033      	str	r3, [r6, #0]
 8003414:	f000 f810 	bl	8003438 <__malloc_unlock>
 8003418:	e7cb      	b.n	80033b2 <_malloc_r+0x8e>
 800341a:	6027      	str	r7, [r4, #0]
 800341c:	e7d9      	b.n	80033d2 <_malloc_r+0xae>
 800341e:	605b      	str	r3, [r3, #4]
 8003420:	deff      	udf	#255	; 0xff
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	20000300 	.word	0x20000300

08003428 <__malloc_lock>:
 8003428:	b510      	push	{r4, lr}
 800342a:	4802      	ldr	r0, [pc, #8]	; (8003434 <__malloc_lock+0xc>)
 800342c:	f7ff ff0c 	bl	8003248 <__retarget_lock_acquire_recursive>
 8003430:	bd10      	pop	{r4, pc}
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	200002fc 	.word	0x200002fc

08003438 <__malloc_unlock>:
 8003438:	b510      	push	{r4, lr}
 800343a:	4802      	ldr	r0, [pc, #8]	; (8003444 <__malloc_unlock+0xc>)
 800343c:	f7ff ff05 	bl	800324a <__retarget_lock_release_recursive>
 8003440:	bd10      	pop	{r4, pc}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	200002fc 	.word	0x200002fc

08003448 <__ssputs_r>:
 8003448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800344a:	b085      	sub	sp, #20
 800344c:	9301      	str	r3, [sp, #4]
 800344e:	9203      	str	r2, [sp, #12]
 8003450:	688e      	ldr	r6, [r1, #8]
 8003452:	9a01      	ldr	r2, [sp, #4]
 8003454:	0007      	movs	r7, r0
 8003456:	000c      	movs	r4, r1
 8003458:	680b      	ldr	r3, [r1, #0]
 800345a:	4296      	cmp	r6, r2
 800345c:	d831      	bhi.n	80034c2 <__ssputs_r+0x7a>
 800345e:	898a      	ldrh	r2, [r1, #12]
 8003460:	2190      	movs	r1, #144	; 0x90
 8003462:	00c9      	lsls	r1, r1, #3
 8003464:	420a      	tst	r2, r1
 8003466:	d029      	beq.n	80034bc <__ssputs_r+0x74>
 8003468:	2003      	movs	r0, #3
 800346a:	6921      	ldr	r1, [r4, #16]
 800346c:	1a5b      	subs	r3, r3, r1
 800346e:	9302      	str	r3, [sp, #8]
 8003470:	6963      	ldr	r3, [r4, #20]
 8003472:	4343      	muls	r3, r0
 8003474:	0fdd      	lsrs	r5, r3, #31
 8003476:	18ed      	adds	r5, r5, r3
 8003478:	9b01      	ldr	r3, [sp, #4]
 800347a:	9802      	ldr	r0, [sp, #8]
 800347c:	3301      	adds	r3, #1
 800347e:	181b      	adds	r3, r3, r0
 8003480:	106d      	asrs	r5, r5, #1
 8003482:	42ab      	cmp	r3, r5
 8003484:	d900      	bls.n	8003488 <__ssputs_r+0x40>
 8003486:	001d      	movs	r5, r3
 8003488:	0552      	lsls	r2, r2, #21
 800348a:	d529      	bpl.n	80034e0 <__ssputs_r+0x98>
 800348c:	0029      	movs	r1, r5
 800348e:	0038      	movs	r0, r7
 8003490:	f7ff ff48 	bl	8003324 <_malloc_r>
 8003494:	1e06      	subs	r6, r0, #0
 8003496:	d02d      	beq.n	80034f4 <__ssputs_r+0xac>
 8003498:	9a02      	ldr	r2, [sp, #8]
 800349a:	6921      	ldr	r1, [r4, #16]
 800349c:	f000 fae7 	bl	8003a6e <memcpy>
 80034a0:	89a2      	ldrh	r2, [r4, #12]
 80034a2:	4b19      	ldr	r3, [pc, #100]	; (8003508 <__ssputs_r+0xc0>)
 80034a4:	401a      	ands	r2, r3
 80034a6:	2380      	movs	r3, #128	; 0x80
 80034a8:	4313      	orrs	r3, r2
 80034aa:	81a3      	strh	r3, [r4, #12]
 80034ac:	9b02      	ldr	r3, [sp, #8]
 80034ae:	6126      	str	r6, [r4, #16]
 80034b0:	18f6      	adds	r6, r6, r3
 80034b2:	6026      	str	r6, [r4, #0]
 80034b4:	6165      	str	r5, [r4, #20]
 80034b6:	9e01      	ldr	r6, [sp, #4]
 80034b8:	1aed      	subs	r5, r5, r3
 80034ba:	60a5      	str	r5, [r4, #8]
 80034bc:	9b01      	ldr	r3, [sp, #4]
 80034be:	429e      	cmp	r6, r3
 80034c0:	d900      	bls.n	80034c4 <__ssputs_r+0x7c>
 80034c2:	9e01      	ldr	r6, [sp, #4]
 80034c4:	0032      	movs	r2, r6
 80034c6:	9903      	ldr	r1, [sp, #12]
 80034c8:	6820      	ldr	r0, [r4, #0]
 80034ca:	f000 fa9f 	bl	8003a0c <memmove>
 80034ce:	2000      	movs	r0, #0
 80034d0:	68a3      	ldr	r3, [r4, #8]
 80034d2:	1b9b      	subs	r3, r3, r6
 80034d4:	60a3      	str	r3, [r4, #8]
 80034d6:	6823      	ldr	r3, [r4, #0]
 80034d8:	199b      	adds	r3, r3, r6
 80034da:	6023      	str	r3, [r4, #0]
 80034dc:	b005      	add	sp, #20
 80034de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034e0:	002a      	movs	r2, r5
 80034e2:	0038      	movs	r0, r7
 80034e4:	f000 facc 	bl	8003a80 <_realloc_r>
 80034e8:	1e06      	subs	r6, r0, #0
 80034ea:	d1df      	bne.n	80034ac <__ssputs_r+0x64>
 80034ec:	0038      	movs	r0, r7
 80034ee:	6921      	ldr	r1, [r4, #16]
 80034f0:	f7ff feac 	bl	800324c <_free_r>
 80034f4:	230c      	movs	r3, #12
 80034f6:	2001      	movs	r0, #1
 80034f8:	603b      	str	r3, [r7, #0]
 80034fa:	89a2      	ldrh	r2, [r4, #12]
 80034fc:	3334      	adds	r3, #52	; 0x34
 80034fe:	4313      	orrs	r3, r2
 8003500:	81a3      	strh	r3, [r4, #12]
 8003502:	4240      	negs	r0, r0
 8003504:	e7ea      	b.n	80034dc <__ssputs_r+0x94>
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	fffffb7f 	.word	0xfffffb7f

0800350c <_svfiprintf_r>:
 800350c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800350e:	b0a1      	sub	sp, #132	; 0x84
 8003510:	9003      	str	r0, [sp, #12]
 8003512:	001d      	movs	r5, r3
 8003514:	898b      	ldrh	r3, [r1, #12]
 8003516:	000f      	movs	r7, r1
 8003518:	0016      	movs	r6, r2
 800351a:	061b      	lsls	r3, r3, #24
 800351c:	d511      	bpl.n	8003542 <_svfiprintf_r+0x36>
 800351e:	690b      	ldr	r3, [r1, #16]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10e      	bne.n	8003542 <_svfiprintf_r+0x36>
 8003524:	2140      	movs	r1, #64	; 0x40
 8003526:	f7ff fefd 	bl	8003324 <_malloc_r>
 800352a:	6038      	str	r0, [r7, #0]
 800352c:	6138      	str	r0, [r7, #16]
 800352e:	2800      	cmp	r0, #0
 8003530:	d105      	bne.n	800353e <_svfiprintf_r+0x32>
 8003532:	230c      	movs	r3, #12
 8003534:	9a03      	ldr	r2, [sp, #12]
 8003536:	3801      	subs	r0, #1
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	b021      	add	sp, #132	; 0x84
 800353c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800353e:	2340      	movs	r3, #64	; 0x40
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	2300      	movs	r3, #0
 8003544:	ac08      	add	r4, sp, #32
 8003546:	6163      	str	r3, [r4, #20]
 8003548:	3320      	adds	r3, #32
 800354a:	7663      	strb	r3, [r4, #25]
 800354c:	3310      	adds	r3, #16
 800354e:	76a3      	strb	r3, [r4, #26]
 8003550:	9507      	str	r5, [sp, #28]
 8003552:	0035      	movs	r5, r6
 8003554:	782b      	ldrb	r3, [r5, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <_svfiprintf_r+0x52>
 800355a:	2b25      	cmp	r3, #37	; 0x25
 800355c:	d148      	bne.n	80035f0 <_svfiprintf_r+0xe4>
 800355e:	1bab      	subs	r3, r5, r6
 8003560:	9305      	str	r3, [sp, #20]
 8003562:	42b5      	cmp	r5, r6
 8003564:	d00b      	beq.n	800357e <_svfiprintf_r+0x72>
 8003566:	0032      	movs	r2, r6
 8003568:	0039      	movs	r1, r7
 800356a:	9803      	ldr	r0, [sp, #12]
 800356c:	f7ff ff6c 	bl	8003448 <__ssputs_r>
 8003570:	3001      	adds	r0, #1
 8003572:	d100      	bne.n	8003576 <_svfiprintf_r+0x6a>
 8003574:	e0af      	b.n	80036d6 <_svfiprintf_r+0x1ca>
 8003576:	6963      	ldr	r3, [r4, #20]
 8003578:	9a05      	ldr	r2, [sp, #20]
 800357a:	189b      	adds	r3, r3, r2
 800357c:	6163      	str	r3, [r4, #20]
 800357e:	782b      	ldrb	r3, [r5, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d100      	bne.n	8003586 <_svfiprintf_r+0x7a>
 8003584:	e0a7      	b.n	80036d6 <_svfiprintf_r+0x1ca>
 8003586:	2201      	movs	r2, #1
 8003588:	2300      	movs	r3, #0
 800358a:	4252      	negs	r2, r2
 800358c:	6062      	str	r2, [r4, #4]
 800358e:	a904      	add	r1, sp, #16
 8003590:	3254      	adds	r2, #84	; 0x54
 8003592:	1852      	adds	r2, r2, r1
 8003594:	1c6e      	adds	r6, r5, #1
 8003596:	6023      	str	r3, [r4, #0]
 8003598:	60e3      	str	r3, [r4, #12]
 800359a:	60a3      	str	r3, [r4, #8]
 800359c:	7013      	strb	r3, [r2, #0]
 800359e:	65a3      	str	r3, [r4, #88]	; 0x58
 80035a0:	4b55      	ldr	r3, [pc, #340]	; (80036f8 <_svfiprintf_r+0x1ec>)
 80035a2:	2205      	movs	r2, #5
 80035a4:	0018      	movs	r0, r3
 80035a6:	7831      	ldrb	r1, [r6, #0]
 80035a8:	9305      	str	r3, [sp, #20]
 80035aa:	f000 fa55 	bl	8003a58 <memchr>
 80035ae:	1c75      	adds	r5, r6, #1
 80035b0:	2800      	cmp	r0, #0
 80035b2:	d11f      	bne.n	80035f4 <_svfiprintf_r+0xe8>
 80035b4:	6822      	ldr	r2, [r4, #0]
 80035b6:	06d3      	lsls	r3, r2, #27
 80035b8:	d504      	bpl.n	80035c4 <_svfiprintf_r+0xb8>
 80035ba:	2353      	movs	r3, #83	; 0x53
 80035bc:	a904      	add	r1, sp, #16
 80035be:	185b      	adds	r3, r3, r1
 80035c0:	2120      	movs	r1, #32
 80035c2:	7019      	strb	r1, [r3, #0]
 80035c4:	0713      	lsls	r3, r2, #28
 80035c6:	d504      	bpl.n	80035d2 <_svfiprintf_r+0xc6>
 80035c8:	2353      	movs	r3, #83	; 0x53
 80035ca:	a904      	add	r1, sp, #16
 80035cc:	185b      	adds	r3, r3, r1
 80035ce:	212b      	movs	r1, #43	; 0x2b
 80035d0:	7019      	strb	r1, [r3, #0]
 80035d2:	7833      	ldrb	r3, [r6, #0]
 80035d4:	2b2a      	cmp	r3, #42	; 0x2a
 80035d6:	d016      	beq.n	8003606 <_svfiprintf_r+0xfa>
 80035d8:	0035      	movs	r5, r6
 80035da:	2100      	movs	r1, #0
 80035dc:	200a      	movs	r0, #10
 80035de:	68e3      	ldr	r3, [r4, #12]
 80035e0:	782a      	ldrb	r2, [r5, #0]
 80035e2:	1c6e      	adds	r6, r5, #1
 80035e4:	3a30      	subs	r2, #48	; 0x30
 80035e6:	2a09      	cmp	r2, #9
 80035e8:	d94e      	bls.n	8003688 <_svfiprintf_r+0x17c>
 80035ea:	2900      	cmp	r1, #0
 80035ec:	d111      	bne.n	8003612 <_svfiprintf_r+0x106>
 80035ee:	e017      	b.n	8003620 <_svfiprintf_r+0x114>
 80035f0:	3501      	adds	r5, #1
 80035f2:	e7af      	b.n	8003554 <_svfiprintf_r+0x48>
 80035f4:	9b05      	ldr	r3, [sp, #20]
 80035f6:	6822      	ldr	r2, [r4, #0]
 80035f8:	1ac0      	subs	r0, r0, r3
 80035fa:	2301      	movs	r3, #1
 80035fc:	4083      	lsls	r3, r0
 80035fe:	4313      	orrs	r3, r2
 8003600:	002e      	movs	r6, r5
 8003602:	6023      	str	r3, [r4, #0]
 8003604:	e7cc      	b.n	80035a0 <_svfiprintf_r+0x94>
 8003606:	9b07      	ldr	r3, [sp, #28]
 8003608:	1d19      	adds	r1, r3, #4
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	9107      	str	r1, [sp, #28]
 800360e:	2b00      	cmp	r3, #0
 8003610:	db01      	blt.n	8003616 <_svfiprintf_r+0x10a>
 8003612:	930b      	str	r3, [sp, #44]	; 0x2c
 8003614:	e004      	b.n	8003620 <_svfiprintf_r+0x114>
 8003616:	425b      	negs	r3, r3
 8003618:	60e3      	str	r3, [r4, #12]
 800361a:	2302      	movs	r3, #2
 800361c:	4313      	orrs	r3, r2
 800361e:	6023      	str	r3, [r4, #0]
 8003620:	782b      	ldrb	r3, [r5, #0]
 8003622:	2b2e      	cmp	r3, #46	; 0x2e
 8003624:	d10a      	bne.n	800363c <_svfiprintf_r+0x130>
 8003626:	786b      	ldrb	r3, [r5, #1]
 8003628:	2b2a      	cmp	r3, #42	; 0x2a
 800362a:	d135      	bne.n	8003698 <_svfiprintf_r+0x18c>
 800362c:	9b07      	ldr	r3, [sp, #28]
 800362e:	3502      	adds	r5, #2
 8003630:	1d1a      	adds	r2, r3, #4
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	9207      	str	r2, [sp, #28]
 8003636:	2b00      	cmp	r3, #0
 8003638:	db2b      	blt.n	8003692 <_svfiprintf_r+0x186>
 800363a:	9309      	str	r3, [sp, #36]	; 0x24
 800363c:	4e2f      	ldr	r6, [pc, #188]	; (80036fc <_svfiprintf_r+0x1f0>)
 800363e:	2203      	movs	r2, #3
 8003640:	0030      	movs	r0, r6
 8003642:	7829      	ldrb	r1, [r5, #0]
 8003644:	f000 fa08 	bl	8003a58 <memchr>
 8003648:	2800      	cmp	r0, #0
 800364a:	d006      	beq.n	800365a <_svfiprintf_r+0x14e>
 800364c:	2340      	movs	r3, #64	; 0x40
 800364e:	1b80      	subs	r0, r0, r6
 8003650:	4083      	lsls	r3, r0
 8003652:	6822      	ldr	r2, [r4, #0]
 8003654:	3501      	adds	r5, #1
 8003656:	4313      	orrs	r3, r2
 8003658:	6023      	str	r3, [r4, #0]
 800365a:	7829      	ldrb	r1, [r5, #0]
 800365c:	2206      	movs	r2, #6
 800365e:	4828      	ldr	r0, [pc, #160]	; (8003700 <_svfiprintf_r+0x1f4>)
 8003660:	1c6e      	adds	r6, r5, #1
 8003662:	7621      	strb	r1, [r4, #24]
 8003664:	f000 f9f8 	bl	8003a58 <memchr>
 8003668:	2800      	cmp	r0, #0
 800366a:	d03c      	beq.n	80036e6 <_svfiprintf_r+0x1da>
 800366c:	4b25      	ldr	r3, [pc, #148]	; (8003704 <_svfiprintf_r+0x1f8>)
 800366e:	2b00      	cmp	r3, #0
 8003670:	d125      	bne.n	80036be <_svfiprintf_r+0x1b2>
 8003672:	2207      	movs	r2, #7
 8003674:	9b07      	ldr	r3, [sp, #28]
 8003676:	3307      	adds	r3, #7
 8003678:	4393      	bics	r3, r2
 800367a:	3308      	adds	r3, #8
 800367c:	9307      	str	r3, [sp, #28]
 800367e:	6963      	ldr	r3, [r4, #20]
 8003680:	9a04      	ldr	r2, [sp, #16]
 8003682:	189b      	adds	r3, r3, r2
 8003684:	6163      	str	r3, [r4, #20]
 8003686:	e764      	b.n	8003552 <_svfiprintf_r+0x46>
 8003688:	4343      	muls	r3, r0
 800368a:	0035      	movs	r5, r6
 800368c:	2101      	movs	r1, #1
 800368e:	189b      	adds	r3, r3, r2
 8003690:	e7a6      	b.n	80035e0 <_svfiprintf_r+0xd4>
 8003692:	2301      	movs	r3, #1
 8003694:	425b      	negs	r3, r3
 8003696:	e7d0      	b.n	800363a <_svfiprintf_r+0x12e>
 8003698:	2300      	movs	r3, #0
 800369a:	200a      	movs	r0, #10
 800369c:	001a      	movs	r2, r3
 800369e:	3501      	adds	r5, #1
 80036a0:	6063      	str	r3, [r4, #4]
 80036a2:	7829      	ldrb	r1, [r5, #0]
 80036a4:	1c6e      	adds	r6, r5, #1
 80036a6:	3930      	subs	r1, #48	; 0x30
 80036a8:	2909      	cmp	r1, #9
 80036aa:	d903      	bls.n	80036b4 <_svfiprintf_r+0x1a8>
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0c5      	beq.n	800363c <_svfiprintf_r+0x130>
 80036b0:	9209      	str	r2, [sp, #36]	; 0x24
 80036b2:	e7c3      	b.n	800363c <_svfiprintf_r+0x130>
 80036b4:	4342      	muls	r2, r0
 80036b6:	0035      	movs	r5, r6
 80036b8:	2301      	movs	r3, #1
 80036ba:	1852      	adds	r2, r2, r1
 80036bc:	e7f1      	b.n	80036a2 <_svfiprintf_r+0x196>
 80036be:	aa07      	add	r2, sp, #28
 80036c0:	9200      	str	r2, [sp, #0]
 80036c2:	0021      	movs	r1, r4
 80036c4:	003a      	movs	r2, r7
 80036c6:	4b10      	ldr	r3, [pc, #64]	; (8003708 <_svfiprintf_r+0x1fc>)
 80036c8:	9803      	ldr	r0, [sp, #12]
 80036ca:	e000      	b.n	80036ce <_svfiprintf_r+0x1c2>
 80036cc:	bf00      	nop
 80036ce:	9004      	str	r0, [sp, #16]
 80036d0:	9b04      	ldr	r3, [sp, #16]
 80036d2:	3301      	adds	r3, #1
 80036d4:	d1d3      	bne.n	800367e <_svfiprintf_r+0x172>
 80036d6:	89bb      	ldrh	r3, [r7, #12]
 80036d8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80036da:	065b      	lsls	r3, r3, #25
 80036dc:	d400      	bmi.n	80036e0 <_svfiprintf_r+0x1d4>
 80036de:	e72c      	b.n	800353a <_svfiprintf_r+0x2e>
 80036e0:	2001      	movs	r0, #1
 80036e2:	4240      	negs	r0, r0
 80036e4:	e729      	b.n	800353a <_svfiprintf_r+0x2e>
 80036e6:	aa07      	add	r2, sp, #28
 80036e8:	9200      	str	r2, [sp, #0]
 80036ea:	0021      	movs	r1, r4
 80036ec:	003a      	movs	r2, r7
 80036ee:	4b06      	ldr	r3, [pc, #24]	; (8003708 <_svfiprintf_r+0x1fc>)
 80036f0:	9803      	ldr	r0, [sp, #12]
 80036f2:	f000 f87b 	bl	80037ec <_printf_i>
 80036f6:	e7ea      	b.n	80036ce <_svfiprintf_r+0x1c2>
 80036f8:	08003b60 	.word	0x08003b60
 80036fc:	08003b66 	.word	0x08003b66
 8003700:	08003b6a 	.word	0x08003b6a
 8003704:	00000000 	.word	0x00000000
 8003708:	08003449 	.word	0x08003449

0800370c <_printf_common>:
 800370c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800370e:	0016      	movs	r6, r2
 8003710:	9301      	str	r3, [sp, #4]
 8003712:	688a      	ldr	r2, [r1, #8]
 8003714:	690b      	ldr	r3, [r1, #16]
 8003716:	000c      	movs	r4, r1
 8003718:	9000      	str	r0, [sp, #0]
 800371a:	4293      	cmp	r3, r2
 800371c:	da00      	bge.n	8003720 <_printf_common+0x14>
 800371e:	0013      	movs	r3, r2
 8003720:	0022      	movs	r2, r4
 8003722:	6033      	str	r3, [r6, #0]
 8003724:	3243      	adds	r2, #67	; 0x43
 8003726:	7812      	ldrb	r2, [r2, #0]
 8003728:	2a00      	cmp	r2, #0
 800372a:	d001      	beq.n	8003730 <_printf_common+0x24>
 800372c:	3301      	adds	r3, #1
 800372e:	6033      	str	r3, [r6, #0]
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	069b      	lsls	r3, r3, #26
 8003734:	d502      	bpl.n	800373c <_printf_common+0x30>
 8003736:	6833      	ldr	r3, [r6, #0]
 8003738:	3302      	adds	r3, #2
 800373a:	6033      	str	r3, [r6, #0]
 800373c:	6822      	ldr	r2, [r4, #0]
 800373e:	2306      	movs	r3, #6
 8003740:	0015      	movs	r5, r2
 8003742:	401d      	ands	r5, r3
 8003744:	421a      	tst	r2, r3
 8003746:	d027      	beq.n	8003798 <_printf_common+0x8c>
 8003748:	0023      	movs	r3, r4
 800374a:	3343      	adds	r3, #67	; 0x43
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	1e5a      	subs	r2, r3, #1
 8003750:	4193      	sbcs	r3, r2
 8003752:	6822      	ldr	r2, [r4, #0]
 8003754:	0692      	lsls	r2, r2, #26
 8003756:	d430      	bmi.n	80037ba <_printf_common+0xae>
 8003758:	0022      	movs	r2, r4
 800375a:	9901      	ldr	r1, [sp, #4]
 800375c:	9800      	ldr	r0, [sp, #0]
 800375e:	9d08      	ldr	r5, [sp, #32]
 8003760:	3243      	adds	r2, #67	; 0x43
 8003762:	47a8      	blx	r5
 8003764:	3001      	adds	r0, #1
 8003766:	d025      	beq.n	80037b4 <_printf_common+0xa8>
 8003768:	2206      	movs	r2, #6
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	2500      	movs	r5, #0
 800376e:	4013      	ands	r3, r2
 8003770:	2b04      	cmp	r3, #4
 8003772:	d105      	bne.n	8003780 <_printf_common+0x74>
 8003774:	6833      	ldr	r3, [r6, #0]
 8003776:	68e5      	ldr	r5, [r4, #12]
 8003778:	1aed      	subs	r5, r5, r3
 800377a:	43eb      	mvns	r3, r5
 800377c:	17db      	asrs	r3, r3, #31
 800377e:	401d      	ands	r5, r3
 8003780:	68a3      	ldr	r3, [r4, #8]
 8003782:	6922      	ldr	r2, [r4, #16]
 8003784:	4293      	cmp	r3, r2
 8003786:	dd01      	ble.n	800378c <_printf_common+0x80>
 8003788:	1a9b      	subs	r3, r3, r2
 800378a:	18ed      	adds	r5, r5, r3
 800378c:	2600      	movs	r6, #0
 800378e:	42b5      	cmp	r5, r6
 8003790:	d120      	bne.n	80037d4 <_printf_common+0xc8>
 8003792:	2000      	movs	r0, #0
 8003794:	e010      	b.n	80037b8 <_printf_common+0xac>
 8003796:	3501      	adds	r5, #1
 8003798:	68e3      	ldr	r3, [r4, #12]
 800379a:	6832      	ldr	r2, [r6, #0]
 800379c:	1a9b      	subs	r3, r3, r2
 800379e:	42ab      	cmp	r3, r5
 80037a0:	ddd2      	ble.n	8003748 <_printf_common+0x3c>
 80037a2:	0022      	movs	r2, r4
 80037a4:	2301      	movs	r3, #1
 80037a6:	9901      	ldr	r1, [sp, #4]
 80037a8:	9800      	ldr	r0, [sp, #0]
 80037aa:	9f08      	ldr	r7, [sp, #32]
 80037ac:	3219      	adds	r2, #25
 80037ae:	47b8      	blx	r7
 80037b0:	3001      	adds	r0, #1
 80037b2:	d1f0      	bne.n	8003796 <_printf_common+0x8a>
 80037b4:	2001      	movs	r0, #1
 80037b6:	4240      	negs	r0, r0
 80037b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80037ba:	2030      	movs	r0, #48	; 0x30
 80037bc:	18e1      	adds	r1, r4, r3
 80037be:	3143      	adds	r1, #67	; 0x43
 80037c0:	7008      	strb	r0, [r1, #0]
 80037c2:	0021      	movs	r1, r4
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	3145      	adds	r1, #69	; 0x45
 80037c8:	7809      	ldrb	r1, [r1, #0]
 80037ca:	18a2      	adds	r2, r4, r2
 80037cc:	3243      	adds	r2, #67	; 0x43
 80037ce:	3302      	adds	r3, #2
 80037d0:	7011      	strb	r1, [r2, #0]
 80037d2:	e7c1      	b.n	8003758 <_printf_common+0x4c>
 80037d4:	0022      	movs	r2, r4
 80037d6:	2301      	movs	r3, #1
 80037d8:	9901      	ldr	r1, [sp, #4]
 80037da:	9800      	ldr	r0, [sp, #0]
 80037dc:	9f08      	ldr	r7, [sp, #32]
 80037de:	321a      	adds	r2, #26
 80037e0:	47b8      	blx	r7
 80037e2:	3001      	adds	r0, #1
 80037e4:	d0e6      	beq.n	80037b4 <_printf_common+0xa8>
 80037e6:	3601      	adds	r6, #1
 80037e8:	e7d1      	b.n	800378e <_printf_common+0x82>
	...

080037ec <_printf_i>:
 80037ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ee:	b08b      	sub	sp, #44	; 0x2c
 80037f0:	9206      	str	r2, [sp, #24]
 80037f2:	000a      	movs	r2, r1
 80037f4:	3243      	adds	r2, #67	; 0x43
 80037f6:	9307      	str	r3, [sp, #28]
 80037f8:	9005      	str	r0, [sp, #20]
 80037fa:	9204      	str	r2, [sp, #16]
 80037fc:	7e0a      	ldrb	r2, [r1, #24]
 80037fe:	000c      	movs	r4, r1
 8003800:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003802:	2a78      	cmp	r2, #120	; 0x78
 8003804:	d809      	bhi.n	800381a <_printf_i+0x2e>
 8003806:	2a62      	cmp	r2, #98	; 0x62
 8003808:	d80b      	bhi.n	8003822 <_printf_i+0x36>
 800380a:	2a00      	cmp	r2, #0
 800380c:	d100      	bne.n	8003810 <_printf_i+0x24>
 800380e:	e0be      	b.n	800398e <_printf_i+0x1a2>
 8003810:	497c      	ldr	r1, [pc, #496]	; (8003a04 <_printf_i+0x218>)
 8003812:	9103      	str	r1, [sp, #12]
 8003814:	2a58      	cmp	r2, #88	; 0x58
 8003816:	d100      	bne.n	800381a <_printf_i+0x2e>
 8003818:	e093      	b.n	8003942 <_printf_i+0x156>
 800381a:	0026      	movs	r6, r4
 800381c:	3642      	adds	r6, #66	; 0x42
 800381e:	7032      	strb	r2, [r6, #0]
 8003820:	e022      	b.n	8003868 <_printf_i+0x7c>
 8003822:	0010      	movs	r0, r2
 8003824:	3863      	subs	r0, #99	; 0x63
 8003826:	2815      	cmp	r0, #21
 8003828:	d8f7      	bhi.n	800381a <_printf_i+0x2e>
 800382a:	f7fc fc75 	bl	8000118 <__gnu_thumb1_case_shi>
 800382e:	0016      	.short	0x0016
 8003830:	fff6001f 	.word	0xfff6001f
 8003834:	fff6fff6 	.word	0xfff6fff6
 8003838:	001ffff6 	.word	0x001ffff6
 800383c:	fff6fff6 	.word	0xfff6fff6
 8003840:	fff6fff6 	.word	0xfff6fff6
 8003844:	003600a3 	.word	0x003600a3
 8003848:	fff60083 	.word	0xfff60083
 800384c:	00b4fff6 	.word	0x00b4fff6
 8003850:	0036fff6 	.word	0x0036fff6
 8003854:	fff6fff6 	.word	0xfff6fff6
 8003858:	0087      	.short	0x0087
 800385a:	0026      	movs	r6, r4
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	3642      	adds	r6, #66	; 0x42
 8003860:	1d11      	adds	r1, r2, #4
 8003862:	6019      	str	r1, [r3, #0]
 8003864:	6813      	ldr	r3, [r2, #0]
 8003866:	7033      	strb	r3, [r6, #0]
 8003868:	2301      	movs	r3, #1
 800386a:	e0a2      	b.n	80039b2 <_printf_i+0x1c6>
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	6809      	ldr	r1, [r1, #0]
 8003870:	1d02      	adds	r2, r0, #4
 8003872:	060d      	lsls	r5, r1, #24
 8003874:	d50b      	bpl.n	800388e <_printf_i+0xa2>
 8003876:	6805      	ldr	r5, [r0, #0]
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	2d00      	cmp	r5, #0
 800387c:	da03      	bge.n	8003886 <_printf_i+0x9a>
 800387e:	232d      	movs	r3, #45	; 0x2d
 8003880:	9a04      	ldr	r2, [sp, #16]
 8003882:	426d      	negs	r5, r5
 8003884:	7013      	strb	r3, [r2, #0]
 8003886:	4b5f      	ldr	r3, [pc, #380]	; (8003a04 <_printf_i+0x218>)
 8003888:	270a      	movs	r7, #10
 800388a:	9303      	str	r3, [sp, #12]
 800388c:	e01b      	b.n	80038c6 <_printf_i+0xda>
 800388e:	6805      	ldr	r5, [r0, #0]
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	0649      	lsls	r1, r1, #25
 8003894:	d5f1      	bpl.n	800387a <_printf_i+0x8e>
 8003896:	b22d      	sxth	r5, r5
 8003898:	e7ef      	b.n	800387a <_printf_i+0x8e>
 800389a:	680d      	ldr	r5, [r1, #0]
 800389c:	6819      	ldr	r1, [r3, #0]
 800389e:	1d08      	adds	r0, r1, #4
 80038a0:	6018      	str	r0, [r3, #0]
 80038a2:	062e      	lsls	r6, r5, #24
 80038a4:	d501      	bpl.n	80038aa <_printf_i+0xbe>
 80038a6:	680d      	ldr	r5, [r1, #0]
 80038a8:	e003      	b.n	80038b2 <_printf_i+0xc6>
 80038aa:	066d      	lsls	r5, r5, #25
 80038ac:	d5fb      	bpl.n	80038a6 <_printf_i+0xba>
 80038ae:	680d      	ldr	r5, [r1, #0]
 80038b0:	b2ad      	uxth	r5, r5
 80038b2:	4b54      	ldr	r3, [pc, #336]	; (8003a04 <_printf_i+0x218>)
 80038b4:	2708      	movs	r7, #8
 80038b6:	9303      	str	r3, [sp, #12]
 80038b8:	2a6f      	cmp	r2, #111	; 0x6f
 80038ba:	d000      	beq.n	80038be <_printf_i+0xd2>
 80038bc:	3702      	adds	r7, #2
 80038be:	0023      	movs	r3, r4
 80038c0:	2200      	movs	r2, #0
 80038c2:	3343      	adds	r3, #67	; 0x43
 80038c4:	701a      	strb	r2, [r3, #0]
 80038c6:	6863      	ldr	r3, [r4, #4]
 80038c8:	60a3      	str	r3, [r4, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	db03      	blt.n	80038d6 <_printf_i+0xea>
 80038ce:	2104      	movs	r1, #4
 80038d0:	6822      	ldr	r2, [r4, #0]
 80038d2:	438a      	bics	r2, r1
 80038d4:	6022      	str	r2, [r4, #0]
 80038d6:	2d00      	cmp	r5, #0
 80038d8:	d102      	bne.n	80038e0 <_printf_i+0xf4>
 80038da:	9e04      	ldr	r6, [sp, #16]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00c      	beq.n	80038fa <_printf_i+0x10e>
 80038e0:	9e04      	ldr	r6, [sp, #16]
 80038e2:	0028      	movs	r0, r5
 80038e4:	0039      	movs	r1, r7
 80038e6:	f7fc fca7 	bl	8000238 <__aeabi_uidivmod>
 80038ea:	9b03      	ldr	r3, [sp, #12]
 80038ec:	3e01      	subs	r6, #1
 80038ee:	5c5b      	ldrb	r3, [r3, r1]
 80038f0:	7033      	strb	r3, [r6, #0]
 80038f2:	002b      	movs	r3, r5
 80038f4:	0005      	movs	r5, r0
 80038f6:	429f      	cmp	r7, r3
 80038f8:	d9f3      	bls.n	80038e2 <_printf_i+0xf6>
 80038fa:	2f08      	cmp	r7, #8
 80038fc:	d109      	bne.n	8003912 <_printf_i+0x126>
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	07db      	lsls	r3, r3, #31
 8003902:	d506      	bpl.n	8003912 <_printf_i+0x126>
 8003904:	6862      	ldr	r2, [r4, #4]
 8003906:	6923      	ldr	r3, [r4, #16]
 8003908:	429a      	cmp	r2, r3
 800390a:	dc02      	bgt.n	8003912 <_printf_i+0x126>
 800390c:	2330      	movs	r3, #48	; 0x30
 800390e:	3e01      	subs	r6, #1
 8003910:	7033      	strb	r3, [r6, #0]
 8003912:	9b04      	ldr	r3, [sp, #16]
 8003914:	1b9b      	subs	r3, r3, r6
 8003916:	6123      	str	r3, [r4, #16]
 8003918:	9b07      	ldr	r3, [sp, #28]
 800391a:	0021      	movs	r1, r4
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	9805      	ldr	r0, [sp, #20]
 8003920:	9b06      	ldr	r3, [sp, #24]
 8003922:	aa09      	add	r2, sp, #36	; 0x24
 8003924:	f7ff fef2 	bl	800370c <_printf_common>
 8003928:	3001      	adds	r0, #1
 800392a:	d147      	bne.n	80039bc <_printf_i+0x1d0>
 800392c:	2001      	movs	r0, #1
 800392e:	4240      	negs	r0, r0
 8003930:	b00b      	add	sp, #44	; 0x2c
 8003932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003934:	2220      	movs	r2, #32
 8003936:	6809      	ldr	r1, [r1, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	6022      	str	r2, [r4, #0]
 800393c:	2278      	movs	r2, #120	; 0x78
 800393e:	4932      	ldr	r1, [pc, #200]	; (8003a08 <_printf_i+0x21c>)
 8003940:	9103      	str	r1, [sp, #12]
 8003942:	0021      	movs	r1, r4
 8003944:	3145      	adds	r1, #69	; 0x45
 8003946:	700a      	strb	r2, [r1, #0]
 8003948:	6819      	ldr	r1, [r3, #0]
 800394a:	6822      	ldr	r2, [r4, #0]
 800394c:	c920      	ldmia	r1!, {r5}
 800394e:	0610      	lsls	r0, r2, #24
 8003950:	d402      	bmi.n	8003958 <_printf_i+0x16c>
 8003952:	0650      	lsls	r0, r2, #25
 8003954:	d500      	bpl.n	8003958 <_printf_i+0x16c>
 8003956:	b2ad      	uxth	r5, r5
 8003958:	6019      	str	r1, [r3, #0]
 800395a:	07d3      	lsls	r3, r2, #31
 800395c:	d502      	bpl.n	8003964 <_printf_i+0x178>
 800395e:	2320      	movs	r3, #32
 8003960:	4313      	orrs	r3, r2
 8003962:	6023      	str	r3, [r4, #0]
 8003964:	2710      	movs	r7, #16
 8003966:	2d00      	cmp	r5, #0
 8003968:	d1a9      	bne.n	80038be <_printf_i+0xd2>
 800396a:	2220      	movs	r2, #32
 800396c:	6823      	ldr	r3, [r4, #0]
 800396e:	4393      	bics	r3, r2
 8003970:	6023      	str	r3, [r4, #0]
 8003972:	e7a4      	b.n	80038be <_printf_i+0xd2>
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	680d      	ldr	r5, [r1, #0]
 8003978:	1d10      	adds	r0, r2, #4
 800397a:	6949      	ldr	r1, [r1, #20]
 800397c:	6018      	str	r0, [r3, #0]
 800397e:	6813      	ldr	r3, [r2, #0]
 8003980:	062e      	lsls	r6, r5, #24
 8003982:	d501      	bpl.n	8003988 <_printf_i+0x19c>
 8003984:	6019      	str	r1, [r3, #0]
 8003986:	e002      	b.n	800398e <_printf_i+0x1a2>
 8003988:	066d      	lsls	r5, r5, #25
 800398a:	d5fb      	bpl.n	8003984 <_printf_i+0x198>
 800398c:	8019      	strh	r1, [r3, #0]
 800398e:	2300      	movs	r3, #0
 8003990:	9e04      	ldr	r6, [sp, #16]
 8003992:	6123      	str	r3, [r4, #16]
 8003994:	e7c0      	b.n	8003918 <_printf_i+0x12c>
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	1d11      	adds	r1, r2, #4
 800399a:	6019      	str	r1, [r3, #0]
 800399c:	6816      	ldr	r6, [r2, #0]
 800399e:	2100      	movs	r1, #0
 80039a0:	0030      	movs	r0, r6
 80039a2:	6862      	ldr	r2, [r4, #4]
 80039a4:	f000 f858 	bl	8003a58 <memchr>
 80039a8:	2800      	cmp	r0, #0
 80039aa:	d001      	beq.n	80039b0 <_printf_i+0x1c4>
 80039ac:	1b80      	subs	r0, r0, r6
 80039ae:	6060      	str	r0, [r4, #4]
 80039b0:	6863      	ldr	r3, [r4, #4]
 80039b2:	6123      	str	r3, [r4, #16]
 80039b4:	2300      	movs	r3, #0
 80039b6:	9a04      	ldr	r2, [sp, #16]
 80039b8:	7013      	strb	r3, [r2, #0]
 80039ba:	e7ad      	b.n	8003918 <_printf_i+0x12c>
 80039bc:	0032      	movs	r2, r6
 80039be:	6923      	ldr	r3, [r4, #16]
 80039c0:	9906      	ldr	r1, [sp, #24]
 80039c2:	9805      	ldr	r0, [sp, #20]
 80039c4:	9d07      	ldr	r5, [sp, #28]
 80039c6:	47a8      	blx	r5
 80039c8:	3001      	adds	r0, #1
 80039ca:	d0af      	beq.n	800392c <_printf_i+0x140>
 80039cc:	6823      	ldr	r3, [r4, #0]
 80039ce:	079b      	lsls	r3, r3, #30
 80039d0:	d415      	bmi.n	80039fe <_printf_i+0x212>
 80039d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039d4:	68e0      	ldr	r0, [r4, #12]
 80039d6:	4298      	cmp	r0, r3
 80039d8:	daaa      	bge.n	8003930 <_printf_i+0x144>
 80039da:	0018      	movs	r0, r3
 80039dc:	e7a8      	b.n	8003930 <_printf_i+0x144>
 80039de:	0022      	movs	r2, r4
 80039e0:	2301      	movs	r3, #1
 80039e2:	9906      	ldr	r1, [sp, #24]
 80039e4:	9805      	ldr	r0, [sp, #20]
 80039e6:	9e07      	ldr	r6, [sp, #28]
 80039e8:	3219      	adds	r2, #25
 80039ea:	47b0      	blx	r6
 80039ec:	3001      	adds	r0, #1
 80039ee:	d09d      	beq.n	800392c <_printf_i+0x140>
 80039f0:	3501      	adds	r5, #1
 80039f2:	68e3      	ldr	r3, [r4, #12]
 80039f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039f6:	1a9b      	subs	r3, r3, r2
 80039f8:	42ab      	cmp	r3, r5
 80039fa:	dcf0      	bgt.n	80039de <_printf_i+0x1f2>
 80039fc:	e7e9      	b.n	80039d2 <_printf_i+0x1e6>
 80039fe:	2500      	movs	r5, #0
 8003a00:	e7f7      	b.n	80039f2 <_printf_i+0x206>
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	08003b71 	.word	0x08003b71
 8003a08:	08003b82 	.word	0x08003b82

08003a0c <memmove>:
 8003a0c:	b510      	push	{r4, lr}
 8003a0e:	4288      	cmp	r0, r1
 8003a10:	d902      	bls.n	8003a18 <memmove+0xc>
 8003a12:	188b      	adds	r3, r1, r2
 8003a14:	4298      	cmp	r0, r3
 8003a16:	d303      	bcc.n	8003a20 <memmove+0x14>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	e007      	b.n	8003a2c <memmove+0x20>
 8003a1c:	5c8b      	ldrb	r3, [r1, r2]
 8003a1e:	5483      	strb	r3, [r0, r2]
 8003a20:	3a01      	subs	r2, #1
 8003a22:	d2fb      	bcs.n	8003a1c <memmove+0x10>
 8003a24:	bd10      	pop	{r4, pc}
 8003a26:	5ccc      	ldrb	r4, [r1, r3]
 8003a28:	54c4      	strb	r4, [r0, r3]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d1fa      	bne.n	8003a26 <memmove+0x1a>
 8003a30:	e7f8      	b.n	8003a24 <memmove+0x18>
	...

08003a34 <_sbrk_r>:
 8003a34:	2300      	movs	r3, #0
 8003a36:	b570      	push	{r4, r5, r6, lr}
 8003a38:	4d06      	ldr	r5, [pc, #24]	; (8003a54 <_sbrk_r+0x20>)
 8003a3a:	0004      	movs	r4, r0
 8003a3c:	0008      	movs	r0, r1
 8003a3e:	602b      	str	r3, [r5, #0]
 8003a40:	f7fc fe12 	bl	8000668 <_sbrk>
 8003a44:	1c43      	adds	r3, r0, #1
 8003a46:	d103      	bne.n	8003a50 <_sbrk_r+0x1c>
 8003a48:	682b      	ldr	r3, [r5, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d000      	beq.n	8003a50 <_sbrk_r+0x1c>
 8003a4e:	6023      	str	r3, [r4, #0]
 8003a50:	bd70      	pop	{r4, r5, r6, pc}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	200002f8 	.word	0x200002f8

08003a58 <memchr>:
 8003a58:	b2c9      	uxtb	r1, r1
 8003a5a:	1882      	adds	r2, r0, r2
 8003a5c:	4290      	cmp	r0, r2
 8003a5e:	d101      	bne.n	8003a64 <memchr+0xc>
 8003a60:	2000      	movs	r0, #0
 8003a62:	4770      	bx	lr
 8003a64:	7803      	ldrb	r3, [r0, #0]
 8003a66:	428b      	cmp	r3, r1
 8003a68:	d0fb      	beq.n	8003a62 <memchr+0xa>
 8003a6a:	3001      	adds	r0, #1
 8003a6c:	e7f6      	b.n	8003a5c <memchr+0x4>

08003a6e <memcpy>:
 8003a6e:	2300      	movs	r3, #0
 8003a70:	b510      	push	{r4, lr}
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d100      	bne.n	8003a78 <memcpy+0xa>
 8003a76:	bd10      	pop	{r4, pc}
 8003a78:	5ccc      	ldrb	r4, [r1, r3]
 8003a7a:	54c4      	strb	r4, [r0, r3]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	e7f8      	b.n	8003a72 <memcpy+0x4>

08003a80 <_realloc_r>:
 8003a80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a82:	0007      	movs	r7, r0
 8003a84:	000e      	movs	r6, r1
 8003a86:	0014      	movs	r4, r2
 8003a88:	2900      	cmp	r1, #0
 8003a8a:	d105      	bne.n	8003a98 <_realloc_r+0x18>
 8003a8c:	0011      	movs	r1, r2
 8003a8e:	f7ff fc49 	bl	8003324 <_malloc_r>
 8003a92:	0005      	movs	r5, r0
 8003a94:	0028      	movs	r0, r5
 8003a96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003a98:	2a00      	cmp	r2, #0
 8003a9a:	d103      	bne.n	8003aa4 <_realloc_r+0x24>
 8003a9c:	f7ff fbd6 	bl	800324c <_free_r>
 8003aa0:	0025      	movs	r5, r4
 8003aa2:	e7f7      	b.n	8003a94 <_realloc_r+0x14>
 8003aa4:	f000 f81b 	bl	8003ade <_malloc_usable_size_r>
 8003aa8:	9001      	str	r0, [sp, #4]
 8003aaa:	4284      	cmp	r4, r0
 8003aac:	d803      	bhi.n	8003ab6 <_realloc_r+0x36>
 8003aae:	0035      	movs	r5, r6
 8003ab0:	0843      	lsrs	r3, r0, #1
 8003ab2:	42a3      	cmp	r3, r4
 8003ab4:	d3ee      	bcc.n	8003a94 <_realloc_r+0x14>
 8003ab6:	0021      	movs	r1, r4
 8003ab8:	0038      	movs	r0, r7
 8003aba:	f7ff fc33 	bl	8003324 <_malloc_r>
 8003abe:	1e05      	subs	r5, r0, #0
 8003ac0:	d0e8      	beq.n	8003a94 <_realloc_r+0x14>
 8003ac2:	9b01      	ldr	r3, [sp, #4]
 8003ac4:	0022      	movs	r2, r4
 8003ac6:	429c      	cmp	r4, r3
 8003ac8:	d900      	bls.n	8003acc <_realloc_r+0x4c>
 8003aca:	001a      	movs	r2, r3
 8003acc:	0031      	movs	r1, r6
 8003ace:	0028      	movs	r0, r5
 8003ad0:	f7ff ffcd 	bl	8003a6e <memcpy>
 8003ad4:	0031      	movs	r1, r6
 8003ad6:	0038      	movs	r0, r7
 8003ad8:	f7ff fbb8 	bl	800324c <_free_r>
 8003adc:	e7da      	b.n	8003a94 <_realloc_r+0x14>

08003ade <_malloc_usable_size_r>:
 8003ade:	1f0b      	subs	r3, r1, #4
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	1f18      	subs	r0, r3, #4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	da01      	bge.n	8003aec <_malloc_usable_size_r+0xe>
 8003ae8:	580b      	ldr	r3, [r1, r0]
 8003aea:	18c0      	adds	r0, r0, r3
 8003aec:	4770      	bx	lr
	...

08003af0 <_init>:
 8003af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003af6:	bc08      	pop	{r3}
 8003af8:	469e      	mov	lr, r3
 8003afa:	4770      	bx	lr

08003afc <_fini>:
 8003afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b02:	bc08      	pop	{r3}
 8003b04:	469e      	mov	lr, r3
 8003b06:	4770      	bx	lr
